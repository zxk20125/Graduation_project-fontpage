{"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-carousel\\readme.md":{"name":"v2-carousel","title":"轮播容器器","type":"component","content":"## 轮播容器器\r\n可以轮播页面、轮播页面模块和轮播图片\r\n\r\n### 使用方法\r\n\r\n#### 1 首先通过组件列表在页面上创建一个轮播容器组件\r\n![微信图片_20200220141304](./docimg/carousel_01.png)\r\n\r\n#### 2 双击进入编辑模式,添加模板\r\n![微信图片_20200220141405](./docimg/carousel_02.png)\r\n#### 3 在模板上编辑好需要展示的页面\r\n![微信图片_20200220162728](./docimg/carousel_03.png)\r\n![微信图片_20200220162819](./docimg/carousel_04.png)\r\n#### 4 点击灰色区域退出编辑模式,轮播容器会自动保存容器内的布局\r\n![微信图片_20200220162850](./docimg/carousel_05.png)\r\n\r\n#### 5 然后只需要通过轮播容器参数配置面板配置'箭头显隐'、'底部切换器位置'、'是否自动播放'、'是否支持移动端的滑动切换'等"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-baidumap\\readme.md":{"name":"v2-component-baidumap","title":"百度地图","type":"component","content":"# 百度地图\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 初始化回调方法\r\n\r\n填写一个方法篮子的方法名,地图加载完后将会调用该方法\r\n\r\n地图实例会作为参数传入\r\n\r\n地图实例的使用方法: [http://lbsyun.baidu.com/jsdemo.htm](http://lbsyun.baidu.com/jsdemo.htm)\r\n```\r\n// map是方法篮子中新建的参数\r\nconst ctx = this;\r\nconsole.log(map)\r\n\r\n```\r\n\r\n#### 初始缩放级别\r\n地图初始缩放级别,数值越大,地图越精细"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-btn\\readme.md":{"name":"v2-component-btn","title":"Button 按钮","type":"component","content":"# Button 按钮\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 是否禁用状态\r\n\r\n是否显示按钮禁用状态,直接填写`true`or `false`,可以绑定布尔类型数据。\r\n\r\n例如: `true` `false`\r\n\r\n#### 是否加载状态\r\n\r\n是否显示按钮加载状态，直接填写`true`or `false`,可以绑定布尔类型数据。\r\n\r\n例如: `true` `false`\r\n\r\n#### 左侧图标\r\n\r\n在左侧显示的图标的名字。例如 `el-icon-delete` `el-icon-goods` `el-icon-info`\r\n\r\n提供的图标列表可参考 [Element UI Icon 组件](https://element.eleme.io/#/zh-CN/component/icon)\r\n\r\n#### 右侧图标\r\n\r\n在右侧显示的图标的名字。例如 `el-icon-delete` `el-icon-goods` `el-icon-info`\r\n\r\n提供的图标列表可参考 [Element UI Icon 组件](https://element.eleme.io/#/zh-CN/component/icon)\r\n\r\n#### 形状\r\n\r\n按钮形状\r\n\r\n- `def` 默认\r\n- `plain` 朴素\r\n- `round` 圆角\r\n- `circle` 圆形\r\n\r\n### 事件配置\r\n\r\n#### click\r\n\r\n当按钮被点击时触发。\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-calendar\\readme.md":{"name":"v2-component-calendar","title":"网银日历","type":"component","content":"## 网银日历\r\n\r\n该组件交互功能并未完善，故只做展示用。"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-carousel\\readme.md":{"name":"v2-component-carousel","title":"Carousel 走马灯","type":"component","content":"## Carousel 走马灯\r\n\r\n在有限空间内，循环播放同一类型的图片、文字等内容\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 轮播项\r\n\r\n该属性需绑定一个数组，数组中每个元素是以下格式的对象：\r\n\r\n```\r\n{\r\n  src: \"图片相对路径（默认空）\",\r\n  alt: \"图片加载不成功时的占位文字（默认空）\",\r\n  title: \"鼠标移到图片上时的提示（默认空）\",\r\n  width: \"图片宽度（默认 100%）\",\r\n  height: \"图片高度（默认 100%）\"\r\n}\r\n```\r\n\r\n例如，可将该属性设为 `clist` 并开启数据绑定，然后在数据篮子中设置 `clist` 的初始值如下，即可看到效果：\r\n\r\n```\r\n[\r\n    {\r\n        title: \"第一张图\",\r\n        src: \"img/user.png\"\r\n    },\r\n    {\r\n        title: \"第二张图\",\r\n        src: \"img/user.jpg\"\r\n    }\r\n]\r\n```\r\n\r\n#### 指示器的触发方式\r\n\r\n- `hover` 鼠标放上去触发\r\n- `click` 点击触发\r\n\r\n#### 自动切换的时间间隔\r\n\r\n数字，单位亳秒（1000 亳秒 = 1 秒）\r\n\r\n#### 高度\r\n\r\n可用此项快速设置固定高度，格式为 CSS 高度。（高度亦可在样式中设置）\r\n\r\n#### 指示器的位置\r\n\r\n- 不填写则默认\r\n- `outside` 外部\r\n- `none` 隐藏\r\n\r\n#### 指示器的触发方式\r\n\r\n- `hover` 悬浮\r\n- `click` 点击\r\n\r\n#### 切换箭头的显示时机\r\n\r\n- `hover` 悬浮\r\n- `always` 保持\r\n- `never` 隐藏\r\n\r\n#### 走马灯的类型\r\n\r\n- 不填写则默认\r\n- `card` 卡片\r\n\r\n#### 展示方向\r\n\r\n- `horizontal` 横排\r\n- `vertical` 竖排\r\n\r\n### 样式配置\r\n\r\n目前该组件在宽度为零时就会塌掉，此时可以使用左侧组件面板中的组件清单来选中该组件。\r\n\r\n为了防止上述情况发生，当该组件在竖直布局中时，应指定固定宽度，或将自我对齐（水平对齐）设为`拉伸`」。（亦可将整个容器的元素对齐（水平对齐）设为`拉伸`）\r\n\r\n\r\n## Element用法\r\n\r\n### Carousel Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| height | 走马灯的高度 | string | — | — |\r\n| initial-index | 初始状态激活的幻灯片的索引，从 0 开始 | number | — | 0 |\r\n| trigger | 指示器的触发方式 | string | click | — |\r\n| autoplay | 是否自动切换 | boolean | — | true |\r\n| interval | 自动切换的时间间隔，单位为毫秒 | number | — | 3000 |\r\n| indicator-position | 指示器的位置 | string | outside/none | — |\r\n| arrow | 切换箭头的显示时机 | string | always/hover/never | hover |\r\n| type | 走马灯的类型 | string | card | — |\r\n| loop | 是否循环显示 | boolean | - | true |\r\n| direction | 走马灯展示的方向 | string | horizontal/vertical | horizontal |\r\n\r\n### Carousel Events\r\n| 事件名称 | 说明 | 回调参数 |\r\n|---------|---------|---------|\r\n| change | 幻灯片切换时触发 | 目前激活的幻灯片的索引，原幻灯片的索引 |\r\n\r\n### Carousel Methods\r\n| 方法名      | 说明          | 参数 |\r\n|---------- |-------------- | -- |\r\n| setActiveItem | 手动切换幻灯片 | 需要切换的幻灯片的索引，从 0 开始；或相应 `el-carousel-item` 的 `name` 属性值 |\r\n| prev | 切换至上一张幻灯片 | — |\r\n| next | 切换至下一张幻灯片 | — |\r\n\r\n### Carousel-Item Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| name | 幻灯片的名字，可用作 `setActiveItem` 的参数 | string | — | — |\r\n| label | 该幻灯片所对应指示器的文本 | string | — | — |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-divider\\readme.md":{"name":"v2-component-divider","title":"Divider 分割线","type":"component","content":"# Divider 分割线\r\n\r\n区隔内容的分割线。\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 填充位置\r\n\r\n- `left` 左\r\n- `center` 中\r\n- `right` 右\r\n\r\n#### 图标在文本的哪侧\r\n\r\n- `left` 左侧\r\n- `right` 右侧\r\n\r\n#### 分割方向\r\n\r\n- `horizontal` 水平\r\n- `vertical` 垂直\r\n\r\n## Element用法\r\n\r\n### Divider Attributes\r\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\r\n|-------------  |---------------- |---------------- |---------------------- |-------- |\r\n| direction      | 设置分割线方向  | string  |            horizontal / vertical          |    horizontal     |\r\n| content-position      | 设置分割线文案的位置 | string  |  left / right / center  |  center |"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-dropdown\\readme.md":{"name":"v2-component-dropdown","title":"Dropdown 下拉菜单","type":"component","content":"# Dropdown 下拉菜单\r\n\r\n将动作或菜单折叠到下拉菜单中。\r\n\r\n## WEBIDE用法\r\n\r\n### 下拉按钮组配置\r\n```JSON\r\n[{\r\n  label:\"选项1\",\r\n  command:\"a\",\r\n  disabled:true,\r\n  icon:\"el-icon-edit\"\r\n},{\r\n  label:\"选项2\",\r\n  command:\"a2\",\r\n  disabled:false\r\n},{\r\n  label:\"选项3\",\r\n  command:\"a3\",\r\n  divided:true\r\n},{\r\n  label:\"选项4\",\r\n  command:\"aa4\"\r\n}]\r\n```\r\n\r\n#### 是否禁用状态\r\n\r\n是否显示按钮禁用状态,直接填写`true`or `false`,可以绑定布尔类型数据。\r\n\r\n例如: `true` `false`\r\n\r\n#### 菜单弹出位置\r\n\r\n- `bottom-end` 从下方结束处\r\n- `top` 上方\r\n- `top-start` 从上方开始处\r\n- `top-end` 到上方结束处\r\n- `bottom` 下方\r\n- `bottom-start` 从下方开始处\r\n\r\n#### 触发下拉的行为\r\n\r\n- `hover` 悬浮\r\n- `click` 点击\r\n\r\n### 参数配置\r\n各属性绑定的数据类型、格式请参照ElementUI官网的组件属性(Attributes)表。\r\n### 样式配置\r\n大部分样式遵循ElementUI 的设计风格，样式配置部分只提供组件尺寸和类型的快捷选择，和组件基础定位相关细项的配置。对于组件内部细项的样式配置，可通过“添加自定义样式类”覆盖。\r\n### 事件配置\r\n各事件类型参照ElementUI官网的组件事件表\r\n\r\n## ElementUI用法\r\n\r\n### Dropdown Attributes\r\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\r\n|-------------  |---------------- |---------------- |---------------------- |-------- |\r\n| type          | 菜单按钮类型，同 Button 组件(只在`split-button`为 true 的情况下有效)   | string  |          —             |    —     |\r\n| size          | 菜单尺寸，在`split-button`为 true 的情况下也对触发按钮生效  | string | medium / small / mini | — |\r\n| split-button  | 下拉触发元素呈现为按钮组    | boolean  |    —  |  false |\r\n| placement    | 菜单弹出位置     | string | top/top-start/top-end/bottom/bottom-start/bottom-end  | bottom-end |\r\n| trigger       | 触发下拉的行为     | string          | hover, click  | hover |\r\n| hide-on-click | 是否在点击菜单项后隐藏菜单     | boolean          | — | true |\r\n| show-timeout  | 展开下拉菜单的延时（仅在 trigger 为 hover 时有效）| number          | — | 250 |\r\n| hide-timeout  | 收起下拉菜单的延时（仅在 trigger 为 hover 时有效）| number          | — | 150 |\r\n| tabindex      | Dropdown 组件的 [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) | number | — | 0 |\r\n\r\n### Dropdown Slots\r\n\r\n| Name | 说明 |\r\n|------|--------|\r\n| — | 触发下拉列表显示的元素。 注意： 必须是一个元素或者或者组件  |\r\n| dropdown | 下拉列表，通常是 `<el-dropdown-menu>` 组件     |\r\n\r\n### Dropdown Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| click  | `split-button` 为 true 时，点击左侧按钮的回调 | — |\r\n| command  | 点击菜单项触发的事件回调 | dropdown-item 的指令 |\r\n| visible-change | 下拉框出现/隐藏时触发 | 出现则为 true，隐藏则为 false |\r\n\r\n### Dropdown Menu Item Attributes\r\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\r\n|-------------  |---------------- |---------------- |---------------------- |-------- |\r\n| command       | 指令     | string/number/object          | — | — |\r\n| disabled      | 禁用     | boolean          | — | false |\r\n| divided       | 显示分割线     | boolean          | — | false |\r\n| icon          | 图标类名 | string   |  —  |  —  |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-echart\\readme.md":{"name":"v2-component-echart","title":"Echart","type":"component","content":"# Echart\r\n请查看Echart官网获取option配置单\r\n\r\n### 配置单\r\n参考[echartjs官网](https://www.echartsjs.com/examples/zh/index.html)实例\r\n```JSON\r\n\r\n {\r\n    title: {\r\n        text: '堆叠区域图'\r\n    },\r\n    tooltip : {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n                backgroundColor: '#6a7985'\r\n            }\r\n        }\r\n    },\r\n    legend: {\r\n        data:['邮件营销','联盟广告','视频广告','直接访问','搜索引擎']\r\n    },\r\n    toolbox: {\r\n        feature: {\r\n            saveAsImage: {}\r\n        }\r\n    },\r\n    grid: {\r\n        left: '3%',\r\n        right: '4%',\r\n        bottom: '3%',\r\n        containLabel: true\r\n    },\r\n    xAxis : [\r\n        {\r\n            type : 'category',\r\n            boundaryGap : false,\r\n            data : ['周一','周二','周三','周四','周五','周六','周日']\r\n        }\r\n    ],\r\n    yAxis : [\r\n        {\r\n            type : 'value'\r\n        }\r\n    ],\r\n    series : [\r\n        {\r\n            name:'邮件营销',\r\n            type:'line',\r\n            stack: '总量',\r\n            areaStyle: {},\r\n            data:[120, 132, 101, 134, 90, 230, 210]\r\n        },\r\n        {\r\n            name:'联盟广告',\r\n            type:'line',\r\n            stack: '总量',\r\n            areaStyle: {},\r\n            data:[220, 182, 191, 234, 290, 330, 310]\r\n        },\r\n        {\r\n            name:'视频广告',\r\n            type:'line',\r\n            stack: '总量',\r\n            areaStyle: {},\r\n            data:[150, 232, 201, 154, 190, 330, 410]\r\n        },\r\n        {\r\n            name:'直接访问',\r\n            type:'line',\r\n            stack: '总量',\r\n            areaStyle: {normal: {}},\r\n            data:[320, 332, 301, 334, 390, 330, 320]\r\n        },\r\n        {\r\n            name:'搜索引擎',\r\n            type:'line',\r\n            stack: '总量',\r\n            label: {\r\n                normal: {\r\n                    show: true,\r\n                    position: 'top'\r\n                }\r\n            },\r\n            areaStyle: {normal: {}},\r\n            data:[820, 932, 901, 934, 1290, 1330, 1320]\r\n        }\r\n    ]\r\n}\r\n\r\n\r\n```\r\n\r\n### 初始化回调方法\r\n填写方法篮子中的方法名,不用绑定  \r\n会返回chart实例,以及echarts构造函数  \r\n```\r\n// 参数chart echarts.init方法返回的对象\r\n// 参数echarts echarts的构造方法\r\n\r\nconst ctx = this;\r\nconsole.log(chart,echarts)\r\n\r\n```\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-icon\\readme.md":{"name":"v2-component-icon","title":"Icon 图标","type":"component","content":"## Icon 图标\r\n\r\n### 属性列表\r\n\r\n#### 图标\r\n\r\n图标的名字。例如 `el-icon-delete` `el-icon-goods` `el-icon-info`\r\n\r\n提供的图标列表可参考 [Element UI Icon 组件](https://element.eleme.io/#/zh-CN/component/icon)\r\n\r\n#### 使用Symbol图标\r\n\r\n使用有颜色的symbol图标渲染(填写图标名的时候不需要#号)"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-image\\readme.md":{"name":"v2-component-image","title":"图片","type":"component","content":"# 图片\r\n\r\n### 属性列表\r\n\r\n#### 路径\r\n\r\n填写图片的相对于public文件夹的路径\r\n\r\n例如想要显示项目下`project/public/img/image.png`,则填写`img/image.png`\r\n\r\n#### 固定原尺寸\r\n按照图片原来的尺寸显示切不可修改"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-menu\\readme.md":{"name":"v2-component-menu","title":"NavMenu 导航菜单","type":"component","content":"## NavMenu 导航菜单\r\n\r\n为网站提供导航功能的菜单。\r\n\r\n### 菜单数据\r\n\r\n```\r\n [\r\n  {\r\n    index: \"1\",\r\n    icon: \"el-icon-menu\",\r\n    name: \"一级菜单01\",\r\n    children: [\r\n      {\r\n        index: \"1-1\",\r\n        icon: \"el-icon-film\",\r\n        name: \"二级菜单01\",\r\n        children: [\r\n          {\r\n            index: \"1-1-1\",\r\n            icon: \"el-icon-date\",\r\n            name: \"三级菜单01\",\r\n            children: [\r\n              {\r\n                index: \"1-1-1-1\",\r\n                icon: \"el-icon-monitor\",\r\n                name: \"四级菜单01\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            index: \"1-1-2\",\r\n            icon: \"el-icon-headset\",\r\n            name: \"三级菜单02\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        index: \"1-2\",\r\n        icon: \"el-icon-data-line\",\r\n        name: \"二级菜单02\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    index: \"2\",\r\n    icon: \"el-icon-s-data\",\r\n    name: \"一级菜单02\"\r\n  },\r\n  {\r\n    index: \"3\",\r\n    icon: \"el-icon-s-operation\",\r\n    name: \"一级菜单03\"\r\n  },\r\n  {\r\n    index: \"4\",\r\n    icon: \"el-icon-user\",\r\n    name: \"一级菜单04\"\r\n  }\r\n];\r\n\r\n```\r\n\r\n### 顶栏\r\n\r\n适用广泛的基础用法。\r\n\r\n:::demo 导航菜单默认为垂直模式，通过`mode`属性可以使导航菜单变更为水平模式。另外，在菜单中通过`submenu`组件可以生成二级菜单。Menu 还提供了`background-color`、`text-color`和`active-text-color`，分别用于设置菜单的背景色、菜单的文字颜色和当前激活菜单的文字颜色。\r\n\r\n```html\r\n<el-menu :default-active=\"activeIndex\" class=\"el-menu-demo\" mode=\"horizontal\" @select=\"handleSelect\">\r\n  <el-menu-item index=\"1\">处理中心</el-menu-item>\r\n  <el-submenu index=\"2\">\r\n    <template slot=\"title\">我的工作台</template>\r\n    <el-menu-item index=\"2-1\">选项1</el-menu-item>\r\n    <el-menu-item index=\"2-2\">选项2</el-menu-item>\r\n    <el-menu-item index=\"2-3\">选项3</el-menu-item>\r\n    <el-submenu index=\"2-4\">\r\n      <template slot=\"title\">选项4</template>\r\n      <el-menu-item index=\"2-4-1\">选项1</el-menu-item>\r\n      <el-menu-item index=\"2-4-2\">选项2</el-menu-item>\r\n      <el-menu-item index=\"2-4-3\">选项3</el-menu-item>\r\n    </el-submenu>\r\n  </el-submenu>\r\n  <el-menu-item index=\"3\" disabled>消息中心</el-menu-item>\r\n  <el-menu-item index=\"4\"><a href=\"https://www.ele.me\" target=\"_blank\">订单管理</a></el-menu-item>\r\n</el-menu>\r\n<div class=\"line\"></div>\r\n<el-menu\r\n  :default-active=\"activeIndex2\"\r\n  class=\"el-menu-demo\"\r\n  mode=\"horizontal\"\r\n  @select=\"handleSelect\"\r\n  background-color=\"#545c64\"\r\n  text-color=\"#fff\"\r\n  active-text-color=\"#ffd04b\">\r\n  <el-menu-item index=\"1\">处理中心</el-menu-item>\r\n  <el-submenu index=\"2\">\r\n    <template slot=\"title\">我的工作台</template>\r\n    <el-menu-item index=\"2-1\">选项1</el-menu-item>\r\n    <el-menu-item index=\"2-2\">选项2</el-menu-item>\r\n    <el-menu-item index=\"2-3\">选项3</el-menu-item>\r\n    <el-submenu index=\"2-4\">\r\n      <template slot=\"title\">选项4</template>\r\n      <el-menu-item index=\"2-4-1\">选项1</el-menu-item>\r\n      <el-menu-item index=\"2-4-2\">选项2</el-menu-item>\r\n      <el-menu-item index=\"2-4-3\">选项3</el-menu-item>\r\n    </el-submenu>\r\n  </el-submenu>\r\n  <el-menu-item index=\"3\" disabled>消息中心</el-menu-item>\r\n  <el-menu-item index=\"4\"><a href=\"https://www.ele.me\" target=\"_blank\">订单管理</a></el-menu-item>\r\n</el-menu>\r\n\r\n<script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        activeIndex: '1',\r\n        activeIndex2: '1'\r\n      };\r\n    },\r\n    methods: {\r\n      handleSelect(key, keyPath) {\r\n        console.log(key, keyPath);\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n:::\r\n\r\n### 侧栏\r\n\r\n垂直菜单，可内嵌子菜单。\r\n\r\n:::demo 通过`el-menu-item-group`组件可以实现菜单进行分组，分组名可以通过`title`属性直接设定，也可以通过具名 slot 来设定。\r\n```html\r\n<el-row class=\"tac\">\r\n  <el-col :span=\"12\">\r\n    <h5>默认颜色</h5>\r\n    <el-menu\r\n      default-active=\"2\"\r\n      class=\"el-menu-vertical-demo\"\r\n      @open=\"handleOpen\"\r\n      @close=\"handleClose\">\r\n      <el-submenu index=\"1\">\r\n        <template slot=\"title\">\r\n          <i class=\"el-icon-location\"></i>\r\n          <span>导航一</span>\r\n        </template>\r\n        <el-menu-item-group>\r\n          <template slot=\"title\">分组一</template>\r\n          <el-menu-item index=\"1-1\">选项1</el-menu-item>\r\n          <el-menu-item index=\"1-2\">选项2</el-menu-item>\r\n        </el-menu-item-group>\r\n        <el-menu-item-group title=\"分组2\">\r\n          <el-menu-item index=\"1-3\">选项3</el-menu-item>\r\n        </el-menu-item-group>\r\n        <el-submenu index=\"1-4\">\r\n          <template slot=\"title\">选项4</template>\r\n          <el-menu-item index=\"1-4-1\">选项1</el-menu-item>\r\n        </el-submenu>\r\n      </el-submenu>\r\n      <el-menu-item index=\"2\">\r\n        <i class=\"el-icon-menu\"></i>\r\n        <span slot=\"title\">导航二</span>\r\n      </el-menu-item>\r\n      <el-menu-item index=\"3\" disabled>\r\n        <i class=\"el-icon-document\"></i>\r\n        <span slot=\"title\">导航三</span>\r\n      </el-menu-item>\r\n      <el-menu-item index=\"4\">\r\n        <i class=\"el-icon-setting\"></i>\r\n        <span slot=\"title\">导航四</span>\r\n      </el-menu-item>\r\n    </el-menu>\r\n  </el-col>\r\n  <el-col :span=\"12\">\r\n    <h5>自定义颜色</h5>\r\n    <el-menu\r\n      default-active=\"2\"\r\n      class=\"el-menu-vertical-demo\"\r\n      @open=\"handleOpen\"\r\n      @close=\"handleClose\"\r\n      background-color=\"#545c64\"\r\n      text-color=\"#fff\"\r\n      active-text-color=\"#ffd04b\">\r\n      <el-submenu index=\"1\">\r\n        <template slot=\"title\">\r\n          <i class=\"el-icon-location\"></i>\r\n          <span>导航一</span>\r\n        </template>\r\n        <el-menu-item-group>\r\n          <template slot=\"title\">分组一</template>\r\n          <el-menu-item index=\"1-1\">选项1</el-menu-item>\r\n          <el-menu-item index=\"1-2\">选项2</el-menu-item>\r\n        </el-menu-item-group>\r\n        <el-menu-item-group title=\"分组2\">\r\n          <el-menu-item index=\"1-3\">选项3</el-menu-item>\r\n        </el-menu-item-group>\r\n        <el-submenu index=\"1-4\">\r\n          <template slot=\"title\">选项4</template>\r\n          <el-menu-item index=\"1-4-1\">选项1</el-menu-item>\r\n        </el-submenu>\r\n      </el-submenu>\r\n      <el-menu-item index=\"2\">\r\n        <i class=\"el-icon-menu\"></i>\r\n        <span slot=\"title\">导航二</span>\r\n      </el-menu-item>\r\n      <el-menu-item index=\"3\" disabled>\r\n        <i class=\"el-icon-document\"></i>\r\n        <span slot=\"title\">导航三</span>\r\n      </el-menu-item>\r\n      <el-menu-item index=\"4\">\r\n        <i class=\"el-icon-setting\"></i>\r\n        <span slot=\"title\">导航四</span>\r\n      </el-menu-item>\r\n    </el-menu>\r\n  </el-col>\r\n</el-row>\r\n\r\n<script>\r\n  export default {\r\n    methods: {\r\n      handleOpen(key, keyPath) {\r\n        console.log(key, keyPath);\r\n      },\r\n      handleClose(key, keyPath) {\r\n        console.log(key, keyPath);\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n:::\r\n\r\n### 折叠\r\n\r\n:::demo\r\n```html\r\n<el-radio-group v-model=\"isCollapse\" style=\"margin-bottom: 20px;\">\r\n  <el-radio-button :label=\"false\">展开</el-radio-button>\r\n  <el-radio-button :label=\"true\">收起</el-radio-button>\r\n</el-radio-group>\r\n<el-menu default-active=\"1-4-1\" class=\"el-menu-vertical-demo\" @open=\"handleOpen\" @close=\"handleClose\" :collapse=\"isCollapse\">\r\n  <el-submenu index=\"1\">\r\n    <template slot=\"title\">\r\n      <i class=\"el-icon-location\"></i>\r\n      <span slot=\"title\">导航一</span>\r\n    </template>\r\n    <el-menu-item-group>\r\n      <span slot=\"title\">分组一</span>\r\n      <el-menu-item index=\"1-1\">选项1</el-menu-item>\r\n      <el-menu-item index=\"1-2\">选项2</el-menu-item>\r\n    </el-menu-item-group>\r\n    <el-menu-item-group title=\"分组2\">\r\n      <el-menu-item index=\"1-3\">选项3</el-menu-item>\r\n    </el-menu-item-group>\r\n    <el-submenu index=\"1-4\">\r\n      <span slot=\"title\">选项4</span>\r\n      <el-menu-item index=\"1-4-1\">选项1</el-menu-item>\r\n    </el-submenu>\r\n  </el-submenu>\r\n  <el-menu-item index=\"2\">\r\n    <i class=\"el-icon-menu\"></i>\r\n    <span slot=\"title\">导航二</span>\r\n  </el-menu-item>\r\n  <el-menu-item index=\"3\" disabled>\r\n    <i class=\"el-icon-document\"></i>\r\n    <span slot=\"title\">导航三</span>\r\n  </el-menu-item>\r\n  <el-menu-item index=\"4\">\r\n    <i class=\"el-icon-setting\"></i>\r\n    <span slot=\"title\">导航四</span>\r\n  </el-menu-item>\r\n</el-menu>\r\n\r\n<style>\r\n  .el-menu-vertical-demo:not(.el-menu--collapse) {\r\n    width: 200px;\r\n    min-height: 400px;\r\n  }\r\n</style>\r\n\r\n<script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        isCollapse: true\r\n      };\r\n    },\r\n    methods: {\r\n      handleOpen(key, keyPath) {\r\n        console.log(key, keyPath);\r\n      },\r\n      handleClose(key, keyPath) {\r\n        console.log(key, keyPath);\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n:::\r\n\r\n### Menu Attribute\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| mode     | 模式   | string  |   horizontal / vertical   | vertical |\r\n| collapse  | 是否水平折叠收起菜单（仅在 mode 为 vertical 时可用）| boolean  |   —   | false |\r\n| background-color  | 菜单的背景色（仅支持 hex 格式） | string |   —   | #ffffff |\r\n| text-color  | 菜单的文字颜色（仅支持 hex 格式） | string |   —   | #303133 |\r\n| active-text-color  | 当前激活菜单的文字颜色（仅支持 hex 格式） | string |   —   | #409EFF |\r\n| default-active | 当前激活菜单的 index | string    | — | — |\r\n| default-openeds | 当前打开的 sub-menu 的 index 的数组 | Array    | — | — |\r\n| unique-opened  | 是否只保持一个子菜单的展开 | boolean   | — | false   |\r\n| menu-trigger  | 子菜单打开的触发方式(只在 mode 为 horizontal 时有效) | string   | hover / click | hover |\r\n| router  | 是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转 | boolean   | — | false   |\r\n| collapse-transition  | 是否开启折叠动画 | boolean   | — | true   |\r\n\r\n### Menu Methods\r\n| 方法名称      | 说明    | 参数      |\r\n|---------- |-------- |---------- |\r\n| open  | 展开指定的 sub-menu | index: 需要打开的 sub-menu 的 index |\r\n| close  | 收起指定的 sub-menu | index: 需要收起的 sub-menu 的 index |\r\n\r\n### Menu Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| select  | 菜单激活回调 | index: 选中菜单项的 index, indexPath: 选中菜单项的 index path  |\r\n| open  | sub-menu 展开的回调 | index: 打开的 sub-menu 的 index， indexPath: 打开的 sub-menu 的 index path  |\r\n| close  | sub-menu 收起的回调 | index: 收起的 sub-menu 的 index， indexPath: 收起的 sub-menu 的 index path  |\r\n\r\n### SubMenu Attribute\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| index     | 唯一标志   | string/null  | — | null |\r\n| popper-class | 弹出菜单的自定义类名 | string | — | — |\r\n| show-timeout | 展开 sub-menu 的延时 | number | — | 300 |\r\n| hide-timeout | 收起 sub-menu 的延时 | number | — | 300 |\r\n| disabled  | 是否禁用 | boolean | — | false |\r\n| popper-append-to-body | 是否将弹出菜单插入至 body 元素。在菜单的定位出现问题时，可尝试修改该属性 | boolean | — | 一级子菜单：true / 非一级子菜单：false |\r\n\r\n### Menu-Item Attribute\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| index     | 唯一标志   | string  | — | — |\r\n| route     | Vue Router 路径对象 | Object | — | — |\r\n| disabled  | 是否禁用 | boolean | — | false |\r\n\r\n### Menu-Group Attribute\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| title     | 分组标题   | string  | — | — |"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-qr\\readme.md":{"name":"v2-component-qr","title":"二维码","type":"component","content":"# 二维码\r\n\r\n#### 二维码内容\r\n扫码获得的文本\r\n\r\n#### 实点颜色\r\n数据点颜色\r\n\r\n\r\nParameter | Explanation\r\n----|----\r\ntext | Contents to encode. 欲编码的内容\r\ncolorDark | Color of \"true\" blocks. Works only when both colorDark and colorLight are set. (BYTE_DTA, BYTE_POS, BYTE_AGN, BYTE_TMG) 实点的颜色\r\nbackgroundColor | Background color 背景色\r\nbgSrc | Background url to embed in the QR code.  欲嵌入的背景图地址\r\nlogoSrc | Logo url to embed at the center of generated QR code 嵌入至二维码中心的 LOGO 地址\r\ncorrectLevel|  Correct Level 0-3 容错级别 0-3\r\nsize | Width as well as the height of the output QR code, includes margin. 尺寸, 长宽一致, 包含外边距\r\nmargin | Margin to add around the QR code, default 20px. 二维码图像的外边距, 默认 20px\r\ncolorLight | Color of empty space, or \"false\" blocks. Works only when both colorDark and colorLight are set. (BYTE_EPT) 空白区的颜色\r\ngifBgSrc | Gif background url to embed in the QR code, If gifBackground is set, backgroundImage will be ignored. This option will affects performance. 欲嵌入的背景图 gif 地址,设置后普通的背景图将失效。设置此选项会影响性能\r\nbackgroundDimming | Color mask to add above the background image. Helpful when having problems with decoding. 叠加在背景图上的颜色, 在解码有难度的时有一定帮助\r\nlogoScale | Value used to scale the logo image. Larger value may result in decode failure. Size of the logo equals to `logoScale*(size-2*margin)`. Default is 0.2. 用于计算 LOGO 大小的值, 过大将导致解码失败, LOGO 尺寸计算公式 `logoScale*(size-2*margin)`, 默认 0.2\r\nlogoMargin | White margin that appears around the logo image. Default is 0. LOGO 标识周围的空白边框, 默认为0\r\nlogoBackgroundColor | Logo background color, need set logo margin. Logo 背景色,需要设置 logo margin\r\nlogoCornerRadius | Radius of the logo's corners.Default is 0 LOGO 标识及其边框的圆角半径, 默认为0\r\nwhiteMargin | If set to true, a white border will appear around the background image. Default is true. 若设为 true, 背景图外将绘制白色边框\r\ndotScale | Value used to scale down the data dots' size. (0 < scale < 1.0) default 0.35 数据区域点缩小比例,默认为0.35\r\nautoColor | If set to true, the dominant color of backgroundImage will be used as colorDark. Default is true. 若为 true, 背景图的主要颜色将作为实点的颜色, 即 colorDark,默认 true\r\nbinarize | If set to true, the whole image will be binarized with the given threshold, or default threshold if not specified. Default is false. 若为 true, 图像将被二值化处理, 未指定阈值则使用默认值\r\nbinarizeThreshold | Threshold used to binarize the whole image. Default is 128. (0 < threshold < 255) 二值化处理的阈值"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-signature\\readme.md":{"name":"v2-component-signature","title":"Signature 签名板","type":"component","content":"# Signature 签名板\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 签名线宽(默认单位: px)\r\n\r\n签名字迹的粗细\r\n\r\n#### 线条颜色\r\n\r\n线条颜色\r\n\r\n#### 背景颜色\r\n\r\n签名时显示的背景颜色\r\n\r\n#### 背景文字\r\n\r\n签名区域的提示文字\r\n\r\n#### 背景文字颜色\r\n\r\n背景文字颜色\r\n\r\n#### 显示清空按钮\r\n\r\n是否显示清空签名的功能按钮\r\n\r\n#### 显示保存按钮(现默认保存 png 格式图片)\r\n\r\n是否显示保存签名图片的功能按钮\r\n\r\n#### 保存图片名(需开启`显示保存按钮`)\r\n\r\n保存签名图片的图片名称\r\n\r\n#### 导出透明图片(需开启`显示保存按钮`)\r\n\r\n当为`true`的时候导出的图片为透明底\r\n`false`的时候和上一个选项背景色一致\r\n\r\n#### 缩放级别\r\n\r\n必须等于组件所在页面上面的css所配置的zoom,否则会出现偏移\r\n不填写会尝试从html标签和body标签获取\r\n\r\n### 方法\r\n\r\n#### clean\r\n\r\n清空签名板\r\n\r\n#### save\r\n\r\n返回签名图片的base64 DataURI形式\r\n\r\nDataURI形式 === \"data:image/png;base64,\" + base64\r\n\r\n当用户没有签名的时候返回null\r\n\r\n#### downloadFile\r\n\r\n将生成的 base64 格式的图片下载保存\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-stabs\\readme.md":{"name":"v2-component-stabs","title":"标签页","type":"component","content":"# 标签页\r\n\r\n####  标签组\r\n```\r\n   [\r\n        {icon: 'el-icon-eleme', text: '标签页1'},\r\n        {icon: 'el-icon-eleme', text: '标签页2'}\r\n      ]\r\n\r\n```\r\n\r\n#### 功能按钮组\r\n```\r\n  [\r\n        {\r\n          text: '按钮一',\r\n          icon: 'el-icon-s-help'\r\n        },\r\n        {\r\n          text: '按钮二',\r\n          icon: 'el-icon-setting'\r\n        }\r\n      ]\r\n\r\n```\r\n\r\n#### 标签风格\r\n\r\n- 不填写 简洁\r\n- `card` 选项卡\r\n- `border-card` 卡片化\r\n\r\n#### 按钮风格\r\n\r\n-  不填写则默认风格\r\n- `text` 文本\r\n- `primary` 主要\r\n- `success` 成功\r\n- `info` 信息\r\n- `warning` 警告\r\n- `danger` 危险\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-steps\\readme.md":{"name":"v2-component-steps","title":"Steps 步骤条","type":"component","content":"#  Steps 步骤条\r\n引导用户按照流程完成任务的分步导航条，可根据实际应用场景设定步骤，步骤不得少于 2 步。\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 当前激活步骤\r\n\r\n常和切换容器一起使用，绑定一个页面码号数据。\r\n\r\n#### 显示方向\r\n\r\n- `horizontal` 横向\r\n- `vertical` 纵向\r\n\r\n#### 当前步骤的状态\r\n\r\n- `process` 默认\r\n- `wait` 等待\r\n- `finish` 完成\r\n- `error` 错误\r\n- `success` 成功\r\n\r\n#### 结束步骤的状态\r\n\r\n- `process` 默认\r\n- `wait` 等待\r\n- `finish` 完成\r\n- `error` 错误\r\n- `success` 成功\r\n\r\n\r\n## Element用法\r\n\r\n### Steps Attributes\r\n\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| space | 每个 step 的间距，不填写将自适应间距。支持百分比。 | number / string | — | — |\r\n| direction | 显示方向 | string | vertical/horizontal | horizontal |\r\n| active | 设置当前激活步骤  | number | — | 0 |\r\n| process-status | 设置当前步骤的状态 | string | wait / process / finish / error / success | process |\r\n| finish-status | 设置结束步骤的状态 | string | wait / process / finish / error / success | finish |\r\n| align-center | 进行居中对齐 | boolean | - | false |\r\n| simple | 是否应用简洁风格 | boolean | - | false |\r\n\r\n### Step Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| title | 标题 | string | — | — |\r\n| description | 描述性文字 | string | — | — |\r\n| icon | 图标 | 传入 icon 的 class 全名来自定义 icon，也支持 slot 方式写入 | string | — |\r\n| status | 设置当前步骤的状态，不设置则根据 steps 确定状态 | wait / process / finish / error / success | - |\r\n\r\n### Step Slot\r\n| name | 说明  |\r\n|----|----|\r\n| icon | 自定义图标 |\r\n| title | 自定义标题 |\r\n| description | 自定义描述性文字 |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-table\\readme.md":{"name":"v2-component-table","title":"Table 表格","type":"component","content":"# Table 表格\r\n\r\n用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 表格数据\r\n\r\n表格数据是一个数组，每个元素是符合以下格式的对象：\r\n\r\n```\r\n[{\r\n            date: '2016-05-02',\r\n            name: '王小虎',\r\n            address: '上海市普陀区金沙江路 1518 弄'\r\n          }, {\r\n            date: '2016-05-04',\r\n            name: '王小虎',\r\n            address: '上海市普陀区金沙江路 1517 弄'\r\n          }, {\r\n            date: '2016-05-01',\r\n            name: '王小虎',\r\n            address: '上海市普陀区金沙江路 1519 弄'\r\n          }, {\r\n            date: '2016-05-03',\r\n            name: '王小虎',\r\n            address: '上海市普陀区金沙江路 1516 弄'\r\n   }]\r\n```\r\n\r\n#### 列类型\r\n\r\n- `text` 文本\r\n- `tag` 标签映射\r\n- `icon` 图标\r\n- `combi` 图标文本组合\r\n- `link` 超链接\r\n- `component` 组件\r\n\r\n#### 打开链接方式\r\n\r\n- `_blank` 新标签打开\r\n- `_self` 当前页面打开\r\n\r\n#### 选择器\r\n\r\n- 无\r\n\r\n- `single` 单选\r\n\r\n```\r\n关键配置项:\r\n  表格数据 tableData\r\n  单选索引值 radioSelect\r\n  选中的值 value\r\n\r\n数据篮子:\r\n  表格数据 tableData = [...]\r\n  单选索引值 radioIdx = 1 // 初始化选中第二行\r\n  选中的值 select = ''  // 初始化的选中值在组件内部根据索引计算得出\r\n\r\n获取选中索引值:\r\n  ctx.radioIdx\r\n获取选中值:\r\n  ctx.select\r\n清除选中值:\r\n  this.radioIdx = null\r\n```\r\n\r\n- `multi` 多选\r\n\r\n```\r\n关键配置项:\r\n  表格数据 tableData\r\n  选中的值 value\r\n\r\n数据篮子:\r\n  表格数据 tableData = [...]\r\n  选中的值 checked = []\r\n\r\n初始化选中值:\r\n  created/mounted生命周期:\r\n    ctx.checked = [ctx.tableData[1], ctx.tableData[2]]  // 初始化选中第二,三行\r\n\r\n获取选中值:\r\n  ctx.checked\r\n\r\n清除选中值:\r\n  // this.__getVueIns(组件实例ID编号)\r\n  this.__getVueIns(1593757588882).$refs._op_table_table.clearSelection();\r\n```\r\n\r\n#### 操作列固定位置\r\n\r\n- 无 不固定\r\n- `right` 左边\r\n- `left` 右边\r\n\r\n\r\n### 特殊类型单元格\r\n\r\n需要设置对应字段\r\n\r\n#### 组件\r\n\r\n- is 例如`v2-component-btn`\r\n- wid 已生成的组件的id\r\n```\r\n// 在列定义中指定key为a的字段\r\n{\r\n  date: '2016-05-02',\r\n  name: '王小虎',\r\n  address: '上海市普陀区金沙江路 1518 弄',\r\n  a: {\r\n    is: 'v2-component-btn',\r\n    wid: '1578365092050'\r\n  }\r\n}\r\n```\r\n\r\n#### 超链接回调方法\r\n\r\n打开`自定义超链接行为`开关后,点击链接不会进行跳转,会调用 超链接回调方法 中指定的方法名,传入参数为(index,row)\r\n\r\n```\r\nhandleLinkCallback(index,row){\r\n  // do something\r\n}\r\n```\r\n\r\n\r\n### 自定义单元格tooltip内容\r\n\r\n打开`自定义tooltip内容`开关,在`tooltip内容方法`填写方法名称\r\n\r\n传入参数有以下三个\r\n- index 当前行的索引\r\n- row 当前行的数据\r\n- item 当前列的配置项\r\n\r\n```\r\ntooltipContentCallback(index,row,item){\r\n  // do something\r\n\r\n  return {\r\n    html: '<div></div>', //会被渲染成html,请小心xss攻击\r\n    text: '<div></div>', //安全,不会被渲染成html\r\n  }\r\n\r\n  return '<div></div>', //安全,不会被渲染成html\r\n}\r\n```\r\n\r\n### 可选择的每页条数\r\n\r\n分页器中提供给用户选择的单页数据数量,绑定一个数组\r\n例如 `[5, 10, 20, 50, 100]`\r\n\r\n### 当前每页条数\r\n\r\n可绑定一个每页条数的初始值 例如 `5`\r\n用户通过分页器改变`每页条数`后也会反映到改变量上\r\n\r\n### 自定义分页处理\r\n\r\n一旦打开该选项,表格会显示所有表格数据的内容,不再根据分页器的页码和单页大小显示内容\r\n\r\n页面打开时会立即调用下面的`切页回调`绑定的方法\r\n\r\n\r\n### 切页回调\r\n\r\n#### 手动处理切换页数\r\n\r\n首先打开分页和自定义分页处理\r\n\r\n默认分页回调方法为`setPageCallback`\r\n\r\n在方法篮子中新建`setPageCallback`方法,并添加`page`和`size`和`next(可选)`两个参数\r\n\r\n```javascript\r\n// 用法\r\n// @param page number 要切换的页数\r\n// @param size number 当前单页数量\r\n// @param next function 可选,用于设置表格数据,既可以直接设置绑定的数据篮子的值,也可以通过next方法修改\r\n\r\nconst tmp = [{},{}]// 假设这是即将要显示的数据\r\n\r\n// 调用next回调方法显示在table上,也可以不使用next方法直接设置绑定的数据篮子的值\r\nnext({\r\n  tableData: tmp, // 要显示在table的数据\r\n  totalCount: 100 // 总条数,不是tmp的长度,用于显示总页数\r\n})\r\n\r\n```\r\n\r\n### 总条目数\r\n\r\n供分页器计算共有多少页的总数\r\n\r\n### 样式配置\r\n\r\n目前该组件在宽度为零时就会塌掉，此时可以使用左侧组件面板中的组件清单来选中该组件。\r\n\r\n为了防止上述情况发生，当该组件在竖直布局中时，应指定固定宽度，或将自我对齐（水平对齐）设为`拉伸`。（亦可将整个容器的元素对齐（水平对齐）设为`拉伸`）\r\n\r\n\r\n\r\n\r\n## Element用法\r\n\r\n### Table Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| data | 显示的数据 | array | — | — |\r\n| height | Table 的高度，默认为自动高度。如果 height 为 number 类型，单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式。  | string/number | — | — |\r\n| max-height | Table 的最大高度。合法的值为数字或者单位为 px 的高度。 | string/number | — | — |\r\n| stripe | 是否为斑马纹 table | boolean | — | false |\r\n| border | 是否带有纵向边框 | boolean | — | false |\r\n| size | Table 的尺寸 | string | medium / small / mini | — |\r\n| fit | 列的宽度是否自撑开 | boolean | — | true |\r\n| show-header | 是否显示表头 | boolean | — | true |\r\n| highlight-current-row | 是否要高亮当前行 | boolean | — | false |\r\n| current-row-key | 当前行的 key，只写属性 | String,Number | — | — |\r\n| row-class-name | 行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。 | Function({row, rowIndex})/String | — | — |\r\n| row-style | 行的 style 的回调方法，也可以使用一个固定的 Object 为所有行设置一样的 Style。 | Function({row, rowIndex})/Object | — | — |\r\n| cell-class-name | 单元格的 className 的回调方法，也可以使用字符串为所有单元格设置一个固定的 className。 | Function({row, column, rowIndex, columnIndex})/String | — | — |\r\n| cell-style | 单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有单元格设置一样的 Style。 | Function({row, column, rowIndex, columnIndex})/Object | — | — |\r\n| header-row-class-name | 表头行的 className 的回调方法，也可以使用字符串为所有表头行设置一个固定的 className。 | Function({row, rowIndex})/String | — | — |\r\n| header-row-style | 表头行的 style 的回调方法，也可以使用一个固定的 Object 为所有表头行设置一样的 Style。 | Function({row, rowIndex})/Object | — | — |\r\n| header-cell-class-name | 表头单元格的 className 的回调方法，也可以使用字符串为所有表头单元格设置一个固定的 className。 | Function({row, column, rowIndex, columnIndex})/String | — | — |\r\n| header-cell-style | 表头单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有表头单元格设置一样的 Style。 | Function({row, column, rowIndex, columnIndex})/Object | — | — |\r\n| row-key | 行数据的 Key，用来优化 Table 的渲染；在使用 reserve-selection 功能与显示树形数据时，该属性是必填的。类型为 String 时，支持多层访问：`user.info.id`，但不支持 `user.info[0].id`，此种情况请使用 `Function`。 | Function(row)/String | — | — |\r\n| empty-text | 空数据时显示的文本内容，也可以通过 `slot=\"empty\"` 设置 | String | — | 暂无数据 |\r\n| default-expand-all | 是否默认展开所有行，当 Table 包含展开行存在或者为树形表格时有效 | Boolean | — | false |\r\n| expand-row-keys | 可以通过该属性设置 Table 目前的展开行，需要设置 row-key 属性才能使用，该属性为展开行的 keys 数组。| Array | — | |\r\n| default-sort | 默认的排序列的 prop 和顺序。它的`prop`属性指定默认的排序的列，`order`指定默认排序的顺序| Object | `order`: ascending, descending | 如果只指定了`prop`, 没有指定`order`, 则默认顺序是ascending |\r\n| tooltip-effect | tooltip `effect` 属性 | String | dark/light | | dark |\r\n| show-summary | 是否在表尾显示合计行 | Boolean | — | false |\r\n| sum-text | 合计行第一列的文本 | String | — | 合计 |\r\n| summary-method | 自定义的合计计算方法 | Function({ columns, data }) | — | — |\r\n| span-method | 合并行或列的计算方法 | Function({ row, column, rowIndex, columnIndex }) | — | — |\r\n| select-on-indeterminate | 在多选表格中，当仅有部分行被选中时，点击表头的多选框时的行为。若为 true，则选中所有行；若为 false，则取消选择所有行 | Boolean | — | true |\r\n| indent      | 展示树形数据时，树节点的缩进 | Number | — | 16 |\r\n| lazy        | 是否懒加载子节点数据 | Boolean | — | — |\r\n| load        | 加载子节点数据的函数，lazy 为 true 时生效，函数第二个参数包含了节点的层级信息 | Function(row, treeNode, resolve) | — | — |\r\n| tree-props  | 渲染嵌套数据的配置选项 | Object | — | { hasChildren: 'hasChildren', children: 'children' } |\r\n\r\n### Table Events\r\n| 事件名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| select | 当用户手动勾选数据行的 Checkbox 时触发的事件 | selection, row |\r\n| select-all | 当用户手动勾选全选 Checkbox 时触发的事件 | selection |\r\n| selection-change | 当选择项发生变化时会触发该事件 | selection |\r\n| cell-mouse-enter | 当单元格 hover 进入时会触发该事件 | row, column, cell, event |\r\n| cell-mouse-leave | 当单元格 hover 退出时会触发该事件 | row, column, cell, event |\r\n| cell-click | 当某个单元格被点击时会触发该事件 | row, column, cell, event |\r\n| cell-dblclick | 当某个单元格被双击击时会触发该事件 | row, column, cell, event |\r\n| row-click | 当某一行被点击时会触发该事件 | row, column, event |\r\n| row-contextmenu | 当某一行被鼠标右键点击时会触发该事件 | row, column, event |\r\n| row-dblclick | 当某一行被双击时会触发该事件 | row, column, event |\r\n| header-click | 当某一列的表头被点击时会触发该事件 | column, event |\r\n| header-contextmenu | 当某一列的表头被鼠标右键点击时触发该事件 | column, event |\r\n| sort-change | 当表格的排序条件发生变化的时候会触发该事件 | { column, prop, order } |\r\n| filter-change | 当表格的筛选条件发生变化的时候会触发该事件，参数的值是一个对象，对象的 key 是 column 的 columnKey，对应的 value 为用户选择的筛选条件的数组。 | filters |\r\n| current-change | 当表格的当前行发生变化的时候会触发该事件，如果要高亮当前行，请打开表格的 highlight-current-row 属性 | currentRow, oldCurrentRow |\r\n| header-dragend | 当拖动表头改变了列的宽度的时候会触发该事件 | newWidth, oldWidth, column, event |\r\n| expand-change  | 当用户对某一行展开或者关闭的时候会触发该事件（展开行时，回调的第二个参数为 expandedRows；树形表格时第二参数为 expanded） | row, (expandedRows \\| expanded) |\r\n\r\n### Table Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| clearSelection | 用于多选表格，清空用户的选择 | — |\r\n| toggleRowSelection | 用于多选表格，切换某一行的选中状态，如果使用了第二个参数，则是设置这一行选中与否（selected 为 true 则选中） | row, selected |\r\n| toggleAllSelection | 用于多选表格，切换所有行的选中状态 | - |\r\n| toggleRowExpansion | 用于可展开表格与树形表格，切换某一行的展开状态，如果使用了第二个参数，则是设置这一行展开与否（expanded 为 true 则展开） | row, expanded |\r\n| setCurrentRow | 用于单选表格，设定某一行为选中行，如果调用时不加参数，则会取消目前高亮行的选中状态。 | row |\r\n| clearSort | 用于清空排序条件，数据会恢复成未排序的状态 | — |\r\n| clearFilter | 不传入参数时用于清空所有过滤条件，数据会恢复成未过滤的状态，也可传入由columnKey组成的数组以清除指定列的过滤条件 | columnKey |\r\n| doLayout | 对 Table 进行重新布局。当 Table 或其祖先元素由隐藏切换为显示时，可能需要调用此方法 | — |\r\n| sort | 手动对 Table 进行排序。参数`prop`属性指定排序列，`order`指定排序顺序。 | prop: string, order: string |\r\n\r\n### Table Slot\r\n| name | 说明 |\r\n|------|--------|\r\n| append | 插入至表格最后一行之后的内容，如果需要对表格的内容进行无限滚动操作，可能需要用到这个 slot。若表格有合计行，该 slot 会位于合计行之上。 |\r\n\r\n### Table-column Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| type | 对应列的类型。如果设置了 `selection` 则显示多选框；如果设置了 `index` 则显示该行的索引（从 1 开始计算）；如果设置了 `expand` 则显示为一个可展开的按钮 | string | selection/index/expand | — |\r\n| index | 如果设置了 `type=index`，可以通过传递 `index` 属性来自定义索引 | number, Function(index) | - | - |\r\n| column-key | column 的 key，如果需要使用 filter-change 事件，则需要此属性标识是哪个 column 的筛选条件 | string | — | — |\r\n| label | 显示的标题 | string | — | — |\r\n| prop | 对应列内容的字段名，也可以使用 property 属性 | string | — | — |\r\n| width | 对应列的宽度 | string | — | — |\r\n| min-width | 对应列的最小宽度，与 width 的区别是 width 是固定的，min-width 会把剩余宽度按比例分配给设置了 min-width 的列 | string | — | — |\r\n| fixed | 列是否固定在左侧或者右侧，true 表示固定在左侧 | string, boolean | true, left, right | — |\r\n| render-header | 列标题 Label 区域渲染使用的 Function | Function(h, { column, $index }) | — | — |\r\n| sortable | 对应列是否可以排序，如果设置为 'custom'，则代表用户希望远程排序，需要监听 Table 的 sort-change 事件 | boolean, string | true, false, 'custom' | false |\r\n| sort-method | 对数据进行排序的时候使用的方法，仅当 sortable 设置为 true 的时候有效，需返回一个数字，和 Array.sort 表现一致 | Function(a, b) | — | — |\r\n| sort-by | 指定数据按照哪个属性进行排序，仅当 sortable 设置为 true 且没有设置 sort-method 的时候有效。如果 sort-by 为数组，则先按照第 1 个属性排序，如果第 1 个相等，再按照第 2 个排序，以此类推 | String/Array/Function(row, index) | — | — |\r\n| sort-orders | 数据在排序时所使用排序策略的轮转顺序，仅当 sortable 为 true 时有效。需传入一个数组，随着用户点击表头，该列依次按照数组中元素的顺序进行排序 | array | 数组中的元素需为以下三者之一：`ascending` 表示升序，`descending` 表示降序，`null` 表示还原为原始顺序 | ['ascending', 'descending', null] |\r\n| resizable | 对应列是否可以通过拖动改变宽度（需要在 el-table 上设置 border 属性为真） | boolean | — | true |\r\n| formatter | 用来格式化内容 | Function(row, column, cellValue, index) | — | — |\r\n| show-overflow-tooltip | 当内容过长被隐藏时显示 tooltip | Boolean | — | false |\r\n| align | 对齐方式 | String | left/center/right | left |\r\n| header-align | 表头对齐方式，若不设置该项，则使用表格的对齐方式 | String | left/center/right | — |\r\n| class-name | 列的 className | string | — | — |\r\n| label-class-name | 当前列标题的自定义类名 | string | — | — |\r\n| selectable | 仅对 type=selection 的列有效，类型为 Function，Function 的返回值用来决定这一行的 CheckBox 是否可以勾选 | Function(row, index) | — | — |\r\n| reserve-selection | 仅对 type=selection 的列有效，类型为 Boolean，为 true 则会在数据更新之后保留之前选中的数据（需指定 `row-key`） | Boolean | — | false |\r\n| filters | 数据过滤的选项，数组格式，数组中的元素需要有 text 和 value 属性。 | Array[{ text, value }] | — | — |\r\n| filter-placement | 过滤弹出框的定位 | String | 与 Tooltip 的 `placement` 属性相同 | — |\r\n| filter-multiple | 数据过滤的选项是否多选 | Boolean | — | true |\r\n| filter-method | 数据过滤使用的方法，如果是多选的筛选项，对每一条数据会执行多次，任意一次返回 true 就会显示。 | Function(value, row, column) | — | — |\r\n| filtered-value | 选中的数据过滤项，如果需要自定义表头过滤的渲染方式，可能会需要此属性。 | Array | — | — |\r\n\r\n### Table-column Scoped Slot\r\n| name | 说明 |\r\n|------|--------|\r\n| — | 自定义列的内容，参数为 { row, column, $index } |\r\n| header | 自定义表头的内容. 参数为 { column, $index } |\r\n\r\n## 更新日志\r\n<!--更新日志 Start-->\r\n### V16.1.3\r\n\r\n* 操作列可以添加图标\r\n\r\n### V16.1.1\r\n\r\n* 操作表头可以进行居中显示\r\n\r\n### V16.1.0\r\n\r\n* 增加操作列的可以根据表格的某一列进行按钮显示隐藏\r\n\r\n### V16.0.9\r\n\r\n* IE上表格卡顿，需要将固定列取消\r\n\r\n### V16.0.8\r\n\r\n* 添加金额类型\r\n\r\n### V16.0.7\r\n\r\n* 修复前端分页bug\r\n\r\n### V16.0.6\r\n\r\n20201105 表格增加文本类型映射，修复其他类型映射bug\r\n\r\n### V16.0.2\r\n\r\n 20201026 表格resize时错位的问题,加上补丁。\r\n\r\n\r\n### V14.0.7\r\n\r\n* 修复前端分页bug\r\n\r\n<!--更新日志 End-->"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-tabs\\readme.md":{"name":"v2-component-tabs","title":"Tabs 标签页","type":"component","content":"# Tabs 标签页\r\n\r\n分隔内容上有关联但属于不同类别的数据集合。\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 当前激活标题值\r\n\r\n常和切换容器一起使用，绑定页面码号数据。\r\n\r\n#### 风格类型\r\n\r\n- 无 默认\r\n- `card` 卡片\r\n- `border-card` 下划线卡片\r\n\r\n#### 选项卡位置\r\n\r\n- `top` 上\r\n- `bright` 右\r\n- `bottom` 下\r\n- `left` 左\r\n\r\n### 样式配置\r\n\r\n目前该组件在宽度为零时就会塌掉，此时可以使用左侧组件面板中的组件清单来选中该组件。\r\n\r\n为了防止上述情况发生，当该组件在竖直布局中时，应指定固定宽度，或将自我对齐（水平对齐）设为`拉伸`。（亦可将整个容器的元素对齐（水平对齐）设为`拉伸`）\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Element用法\r\n\r\n### Tabs Attributes\r\n| 参数       | 说明     | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model  | 绑定值，选中选项卡的 name  | string   |  —  |  第一个选项卡的 name |\r\n| type     | 风格类型   | string   | card/border-card  |     —    |\r\n| closable  | 标签是否可关闭   | boolean   | — |  false  |\r\n| addable  | 标签是否可增加   | boolean   | — |  false  |\r\n| editable  | 标签是否同时可增加和关闭   | boolean   | — |  false  |\r\n| tab-position  | 选项卡所在位置 | string   |  top/right/bottom/left  |  top |\r\n| stretch  | 标签的宽度是否自撑开 | boolean   |  -  |  false |\r\n| before-leave | 切换标签之前的钩子，若返回 false 或者返回 Promise 且被 reject，则阻止切换。 | Function(activeName, oldActiveName) | — | — |\r\n\r\n### Tabs Events\r\n| 事件名称 | 说明 | 回调参数 |\r\n|---------- |-------- |---------- |\r\n| tab-click  | tab 被选中时触发 | 被选中的标签 tab 实例 |\r\n| tab-remove  | 点击 tab 移除按钮后触发  | 被删除的标签的 name |\r\n| tab-add  | 点击 tabs 的新增按钮后触发  | — |\r\n| edit  | 点击 tabs 的新增按钮或 tab 被关闭后触发  | (targetName, action) |\r\n\r\n### Tab-pane Attributes\r\n| 参数       | 说明     | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| label     | 选项卡标题   | string   | — |    —     |\r\n| disabled | 是否禁用 | boolean | — | false |\r\n| name      | 与选项卡绑定值 value 对应的标识符，表示选项卡别名 | string | — | 该选项卡在选项卡列表中的顺序值，如第一个选项卡则为'1' |\r\n| closable  | 标签是否可关闭   | boolean   | — |  false  |\r\n| lazy  | 标签是否延迟渲染   | boolean   | — |  false  |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-text-value\\readme.md":{"name":"v2-component-text-value","title":"键值对组件","type":"component","content":"## 键值对组件\r\n\r\n### 属性列表\r\n\r\n#### 内容文本\r\n\r\n显示值。\r\n\r\n#### 标题文本\r\n\r\n显示值的描述。\r\n\r\n#### 溢出处理\r\n\r\n- `nomal` 不处理\r\n- `hidden` 隐藏\r\n\r\n#### 值类型\r\n\r\n显示在值的内容类型\r\n\r\n- `text` 文本\r\n- `icon` 图标\r\n\r\n#### 布局\r\n\r\n排列方式\r\n\r\n- `text-value-col` 竖向\r\n- `text-value-row` 横向"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-text\\readme.md":{"name":"v2-component-text","title":"文本组件","type":"component","content":"# 文本组件\r\n\r\n### 属性列表\r\n\r\n#### 文本\r\n\r\n要显示的文本内容，可为定值或绑定变量。\r\n\r\n#### 溢出处理\r\n\r\n- `nomal` 不处理\r\n- `hidden` 隐藏\r\n\r\n#### 最大行数\r\n\r\n当打开溢出处理时最多显示行数\r\n\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-component-tree\\readme.md":{"name":"v2-component-tree","title":"Tree 树形控件","type":"component","content":"# Tree 树形控件\r\n\r\n用清晰的层级结构展示信息，可展开或折叠。\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 节点数据\r\n\r\n绑定一个树形结构，例如：\r\n\r\n```\r\n[{\r\n  id: 1,\r\n  label: '一级 1',\r\n  value: '1',\r\n  children: [{\r\n    id: 4,\r\n    label: '二级 1-1',\r\n    value: '1-1',\r\n    children: [{\r\n      id: 9,\r\n      label: '三级 1-1-1',\r\n      value: '1-1-1',\r\n    }, {\r\n      id: 10,\r\n      label: '三级 1-1-2'\r\n    }]\r\n  }]\r\n}, {\r\n  id: 2,\r\n  label: '一级 2',\r\n  children: [{\r\n    id: 5,\r\n    label: '二级 2-1'\r\n  }, {\r\n    id: 6,\r\n    label: '二级 2-2'\r\n  }]\r\n}, {\r\n  id: 3,\r\n  label: '一级 3',\r\n  children: [{\r\n    id: 7,\r\n    label: '二级 3-1'\r\n  }, {\r\n    id: 8,\r\n    label: '二级 3-2'\r\n  }]\r\n}]\r\n```\r\n#### 节点主键\r\n\r\n节点唯一,不存在这个属性的节点会被忽略\r\n例如 节点主键为`value`  \r\n则\r\n```\r\n{\r\n  id: 1,\r\n  label: 'a'\r\n}\r\n```\r\n这个节点不会被显示\r\n\r\n\r\n#### 是否显示勾选\r\n\r\n显示勾选框\r\n\r\n#### 选中的值\r\n\r\n绑定一个数据篮子中的数组,数组内容是树节点的value  \r\n若绑定一个不为空的数组,则树节点的value在数组中,则该树节点会被默认选中  \r\n用户选中的值也会反应都这个数组上  \r\n_注意绑定的数组不要是数据篮子高级模式的数据,因为高级模式的数据是只读的_\r\n\r\n#### 是否仅包含叶节点\r\n当这个值为`true`时,当前选中值不包含非叶子数据  \r\n当这个值为`false`时,当前选中值包含所有子树都被选中的节点的值\r\n例如\r\n```\r\n[\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": true\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"checked\": false\r\n      }\r\n    ]\r\n  }\r\n]\r\n// leafOnly === true\r\n// value -> [\"1-1\"]\r\n```\r\n```\r\n[\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": true\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"checked\": true\r\n      }\r\n    ]\r\n  }\r\n]\r\n// leafOnly === true\r\n// value -> [\"1-1\",\"1-2\"]\r\n```\r\n```\r\n[\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": true\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"checked\": true\r\n      }\r\n    ]\r\n  }\r\n]\r\n// leafOnly === false\r\n// value -> [\"1\",\"1-1\",\"1-2\"]\r\n```\r\n```\r\n[\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": false\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"checked\": true\r\n      }\r\n    ]\r\n  }\r\n]\r\n// leafOnly === false\r\n// value -> [\"1-2\"]\r\n```\r\n\r\n## Element用法\r\n\r\n### Attributes\r\n| 参数                  | 说明                                               | 类型                        | 可选值  | 默认值   |\r\n| --------------------- | ---------------------------------------- | --------------------------- | ---- | ----- |\r\n| data                  | 展示数据                                           | array                       | —    | —     |\r\n| empty-text            | 内容为空的时候展示的文本                           | String                      | —    | —     |\r\n| node-key              | 每个树节点用来作为唯一标识的属性，整棵树应该是唯一的               | String                      | —    | —     |\r\n| props                 | 配置选项，具体看下表                               | object                      | —    | —     |\r\n| render-after-expand   | 是否在第一次展开某个树节点后才渲染其子节点         | boolean                      | —    | true |\r\n| load                  | 加载子树数据的方法，仅当 lazy 属性为true 时生效    | function(node, resolve)     | —    | —     |\r\n| render-content        | 树节点的内容区的渲染 Function                      | Function(h, { node, data, store }        | —    | —     |\r\n| highlight-current     | 是否高亮当前选中节点，默认值是 false。             | boolean                     | —    | false |\r\n| default-expand-all    | 是否默认展开所有节点                               | boolean                     | —    | false |\r\n| expand-on-click-node  | 是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。 | boolean                     | —    | true  |\r\n| check-on-click-node   | 是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。 | boolean                     | —    | false |\r\n| auto-expand-parent    | 展开子节点的时候是否自动展开父节点                 | boolean                     | —    | true  |\r\n| default-expanded-keys | 默认展开的节点的 key 的数组                        | array                       | —    | —     |\r\n| show-checkbox         | 节点是否可被选择                                   | boolean                     | —    | false |\r\n| check-strictly        | 在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false   | boolean                     | —    | false |\r\n| default-checked-keys  | 默认勾选的节点的 key 的数组                        | array                       | —    | —     |\r\n| current-node-key      | 当前选中的节点                                   | string, number               | —    | —     |\r\n| filter-node-method    | 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏 | Function(value, data, node) | —    | —     |\r\n| accordion             | 是否每次只打开一个同级树节点展开                   | boolean                     | —    | false |\r\n| indent                | 相邻级节点间的水平缩进，单位为像素                 | number                     | —    | 16 |\r\n| icon-class            | 自定义树节点的图标                              |  string                     | -    | -     |\r\n| lazy                  | 是否懒加载子节点，需与 load 方法结合使用           | boolean                     | —    | false |\r\n| draggable             | 是否开启拖拽节点功能                                   | boolean            | —    | false |\r\n| allow-drag            | 判断节点能否被拖拽                  | Function(node)  | —  | —  |\r\n| allow-drop            | 拖拽时判定目标节点能否被放置。`type` 参数有三种情况：'prev'、'inner' 和 'next'，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后 | Function(draggingNode, dropNode, type)  | —    | —     |\r\n\r\n### props\r\n| 参数       | 说明                | 类型     | 可选值  | 默认值  |\r\n| -------- | ----------------- | ------ | ---- | ---- |\r\n| label    | 指定节点标签为节点对象的某个属性值 | string, function(data, node) | —    | —    |\r\n| children | 指定子树为节点对象的某个属性值 | string | —    | —    |\r\n| disabled | 指定节点选择框是否禁用为节点对象的某个属性值 | boolean, function(data, node) | —    | —    |\r\n| isLeaf | 指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效 | boolean, function(data, node) | —    | —    |\r\n\r\n### 方法\r\n`Tree` 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。\r\n`Tree` 拥有如下方法：\r\n\r\n| 方法名             | 说明                                       | 参数                                       |\r\n| --------------- | ---------------------------------------- | ---------------------------------------- |\r\n| filter          | 对树节点进行筛选操作                               | 接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数 |\r\n| updateKeyChildren | 通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性 | (key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组 |\r\n| getCheckedNodes | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前被选中的节点所组成的数组 | (leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 `false` 2. 是否包含半选节点，默认值为 `false` |\r\n| setCheckedNodes | 设置目前勾选的节点，使用此方法必须设置 node-key 属性          | (nodes) 接收勾选节点数据的数组                      |\r\n| getCheckedKeys  | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前被选中的节点的 key 所组成的数组 | (leafOnly) 接收一个 boolean 类型的参数，若为 `true` 则仅返回被选中的叶子节点的 keys，默认值为 `false` |\r\n| setCheckedKeys  | 通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性  | (keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 `true` 则仅设置叶子节点的选中状态，默认值为 `false` |\r\n| setChecked      | 通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性 | (key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中  3. boolean 类型，是否设置子节点 ，默认为 false |\r\n| getHalfCheckedNodes | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前半选中的节点所组成的数组  | - |\r\n| getHalfCheckedKeys | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前半选中的节点的 key 所组成的数组 | - |\r\n| getCurrentKey   | 获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null | — |\r\n| getCurrentNode  | 获取当前被选中节点的 data，若没有节点被选中则返回 null | — |\r\n| setCurrentKey   | 通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性 | (key) 待被选节点的 key，若为 null 则取消当前高亮的节点 |\r\n| setCurrentNode  | 通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性 | (node) 待被选节点的 node |\r\n| getNode         | 根据 data 或者 key 拿到 Tree 组件中的 node | (data) 要获得 node 的 key 或者 data |\r\n| remove          | 删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性  | (data) 要删除的节点的 data 或者 node |\r\n| append          | 为 Tree 中的一个节点追加一个子节点 | (data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node |\r\n| insertBefore    | 为 Tree 的一个节点的前面增加一个节点  | (data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node |\r\n| insertAfter     | 为 Tree 的一个节点的后面增加一个节点  | (data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node |\r\n\r\n### Events\r\n| 事件名称           | 说明             | 回调参数                                     |\r\n| -------------- | -------------- | ---------------------------------------- |\r\n| node-click     | 节点被点击时的回调      | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。 |\r\n| node-contextmenu | 当某一节点被鼠标右键点击时会触发该事件 | 共四个参数，依次为：event、传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。 |\r\n| check-change   | 节点选中状态发生变化时的回调 | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点 |\r\n| check          | 当复选框被点击的时候触发 | 共两个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性 |\r\n| current-change | 当前选中节点变化时触发的事件 | 共两个参数，依次为：当前节点的数据，当前节点的 Node 对象          |\r\n| node-expand    | 节点被展开时触发的事件    | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身 |\r\n| node-collapse  | 节点被关闭时触发的事件    | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身 |\r\n| node-drag-start | 节点开始拖拽时触发的事件  | 共两个参数，依次为：被拖拽节点对应的 Node、event |\r\n| node-drag-enter | 拖拽进入其他节点时触发的事件  | 共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event |\r\n| node-drag-leave | 拖拽离开某个节点时触发的事件  | 共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event |\r\n| node-drag-over | 在拖拽节点时触发的事件（类似浏览器的 mouseover 事件） | 共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event |\r\n| node-drag-end  | 拖拽结束时（可能未成功）触发的事件  | 共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、被拖拽节点的放置位置（before、after、inner）、event |\r\n| node-drop  | 拖拽成功完成时触发的事件  | 共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event |\r\n\r\n### Scoped Slot\r\n| name | 说明 |\r\n|------|--------|\r\n| — | 自定义树节点的内容，参数为 { node, data } |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-ctn-order\\readme.md":{"name":"v2-ctn-order","title":"顺序布局","type":"component","content":"## 顺序布局\r\n\r\n顺序布局其实就是一个单容器，往容器内拖拽的任意组件都会依次排列在上一个组件后面。\r\n当然可以拖过拖拽调整顺序，但是容器内的组件都是平级排列的，只能按顺序放置组件,里面不能嵌套其他排列方式的容器。\r\n\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-ctn-xy\\readme.md":{"name":"v2-ctn-xy","title":"自由布局容器","type":"component","content":"## 自由布局容器\r\n\r\n自由布局容器可以实现组件随拖拽的位置而固定，组件通过绝对定位来确定位置，\r\n容器内的组件以3绝对定位的方式方式,不受容器内其他组件的位置和大小影响。在这个容器内，组件可以随意放大变形，旋转，层叠等，是做大屏和多媒体页的好帮手。\r\n\r\n\r\n## 更新日志\r\n\r\nV16.0.1 20201105 删除容器指定的编辑器\r\nV16.0.2 20201108 基于16.0.1删除部分配置\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-cascader\\readme.md":{"name":"v2-form-cascader","title":"Cascader 级联选择器","type":"component","content":"# Cascader 级联选择器\r\n\r\n当一个数据集合有清晰的层级结构时，可通过级联选择器逐级查看并选择。\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 选中值\r\n\r\n现在正被选中的选项的值，可以绑定数据。\r\n\r\n#### 选项列表\r\n```\r\n[\r\n  {\r\n    \"value\": \"A\",\r\n    \"label\": \"A\",\r\n    \"children\": [\r\n      {\r\n        \"value\": \"AA\",\r\n        \"label\": \"AA\",\r\n        \"children\": [\r\n          {\r\n            \"value\": \"AAA\",\r\n            \"label\": \"AAA\"\r\n          },\r\n          {\r\n            \"value\": \"AAB\",\r\n            \"label\": \"AAB\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"value\": \"AB\",\r\n        \"label\": \"AB\",\r\n        \"children\": [\r\n          {\r\n            \"value\": \"ABA\",\r\n            \"label\": \"ABA\"\r\n          },\r\n          {\r\n            \"value\": \"ABB\",\r\n            \"label\": \"ABB\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n\r\n#### 是否必填\r\n\r\n`true` (必填), `false` (非必填)\r\n\r\n#### 标题文本\r\n\r\n显示在输入框左侧的文本。\r\n\r\n#### 标题宽度\r\n\r\n输入框左侧文本区域的宽度，格式为 CSS 宽度。\r\n\r\n#### 提示文本\r\n\r\n用户未选择任何选项时显示的占位文本。\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n\r\n#### 触发子菜单方式\r\n\r\n- `click` 点击\r\n- `hover` 悬浮\r\n\r\n\r\n\r\n\r\n## Element用法\r\n\r\n### Cascader Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model | 选中项绑定值 | - | — | — |\r\n| options | 可选项数据源，键名可通过 `Props` 属性配置 | array | — | — |\r\n| props | 配置选项，具体见下表 | object | — | — |\r\n| size | 尺寸 | string | medium / small / mini | — |\r\n| placeholder | 输入框占位文本 | string | — | 请选择 |\r\n| disabled | 是否禁用 | boolean | — | false |\r\n| clearable | 是否支持清空选项 | boolean | — | false |\r\n| show-all-levels | 输入框中是否显示选中值的完整路径 | boolean | — | true |\r\n| collapse-tags | 多选模式下是否折叠Tag | boolean | - | false |\r\n| separator | 选项分隔符 | string | — | 斜杠' / ' |\r\n| filterable | 是否可搜索选项 | boolean | — | — |\r\n| filter-method | 自定义搜索逻辑，第一个参数是节点`node`，第二个参数是搜索关键词`keyword`，通过返回布尔值表示是否命中 | function(node, keyword) | - | - |\r\n| debounce | 搜索关键词输入的去抖延迟，毫秒 | number | — | 300 |\r\n| before-filter | 筛选之前的钩子，参数为输入的值，若返回 false 或者返回 Promise 且被 reject，则停止筛选 | function(value) | — | — |\r\n| popper-class | 自定义浮层类名   | string | —  | — |\r\n\r\n### Cascader Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| change | 当选中节点变化时触发 | 选中节点的值 |\r\n| expand-change | 当展开节点发生变化时触发 | 各父级选项值组成的数组 |\r\n| blur | 当失去焦点时触发 | (event: Event) |\r\n| focus | 当获得焦点时触发 | (event: Event) |\r\n| visible-change | 下拉框出现/隐藏时触发 | 出现则为 true，隐藏则为 false |\r\n| remove-tag | 在多选模式下，移除Tag时触发 | 移除的Tag对应的节点的值 |\r\n\r\n### Cascader Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| getCheckedNodes | 获取选中的节点 | (leafOnly) 是否只是叶子节点，默认值为 `false` |\r\n\r\n### Cascader Slots\r\n| 名称     | 说明 |\r\n|---------|-------------|\r\n| - | 自定义备选项的节点内容，参数为 { node, data }，分别为当前节点的 Node 对象和数据 |\r\n| empty  | 无匹配选项时的内容 |\r\n\r\n### CascaderPanel Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model | 选中项绑定值 | - | — | — |\r\n| options | 可选项数据源，键名可通过 `Props` 属性配置 | array | — | — |\r\n| props | 配置选项，具体见下表 | object | — | — |\r\n\r\n### CascaderPanel Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| change | 当选中节点变化时触发 | 选中节点的值 |\r\n| expand-change | 当展开节点发生变化时触发 | 各父级选项值组成的数组 |\r\n\r\n### CascaderPanel Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| getCheckedNodes | 获取选中的节点数组 | (leafOnly) 是否只是叶子节点，默认值为 `false` |\r\n| clearCheckedNodes | 清空选中的节点 | - |\r\n\r\n### CascaderPanel Slots\r\n| 名称     | 说明 |\r\n|---------|-------------|\r\n| - | 自定义备选项的节点内容，参数为 { node, data }，分别为当前节点的 Node 对象和数据 |\r\n\r\n### Props\r\n| 参数     | 说明              | 类型   | 可选值 | 默认值 |\r\n| -------- | ----------------- | ------ | ------ | ------ |\r\n| expandTrigger | 次级菜单的展开方式 | string | click / hover | 'click' |\r\n| multiple | 是否多选 | boolean | - | false |\r\n| checkStrictly | 是否严格的遵守父子节点不互相关联 | boolean | - | false |\r\n| emitPath | 在选中节点改变时，是否返回由该节点所在的各级菜单的值所组成的数组，若设置 false，则只返回该节点的值 | boolean | - | true |\r\n| lazy | 是否动态加载子节点，需与 lazyLoad 方法结合使用 | boolean | - | false |\r\n| lazyLoad | 加载动态数据的方法，仅在 lazy 为 true 时有效 | function(node, resolve)，`node`为当前点击的节点，`resolve`为数据加载完成的回调(必须调用) | - | - |\r\n| value    | 指定选项的值为选项对象的某个属性值 | string | — | 'value' |\r\n| label    | 指定选项标签为选项对象的某个属性值 | string | — | 'label' |\r\n| children | 指定选项的子选项为选项对象的某个属性值 | string | — | 'children' |\r\n| disabled | 指定选项的禁用为选项对象的某个属性值 | string | — | 'disabled' |\r\n| leaf     | 指定选项的叶子节点的标志位为选项对象的某个属性值 | string | — | 'leaf' |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-checkbox\\readme.md":{"name":"v2-form-checkbox","title":"Checkbox 多选框","type":"component","content":"# Checkbox 多选框\r\n一组备选项中进行多选\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n#### 输入值\r\n\r\n当前已选选项的值组成的数组，可以绑定数据使用。\r\n\r\n#### 选项列表\r\n```\r\n[\r\n  {\r\n    \"text\": 0,\r\n    \"label\": \"选项一\",\r\n    \"disabled\": true\r\n  \r\n  },\r\n  {\r\n    \"text\": 1,\r\n    \"label\": \"选项二\",\r\n    \"disabled\": false\r\n\r\n  }\r\n]\r\n```\r\n\r\n\r\n\r\n\r\n## Element用法\r\n\r\n### Checkbox Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model | 绑定值 | string / number / boolean | — | — |\r\n| label     | 选中状态的值（只有在`checkbox-group`或者绑定对象类型为`array`时有效）| string / number / boolean  |       —        |     —    |\r\n| true-label | 选中时的值   | string / number | — |     —    |\r\n| false-label | 没有选中时的值   | string / number    |      —         |     —    |\r\n| disabled  | 是否禁用    | boolean   |  — | false   |\r\n| border  | 是否显示边框  | boolean   | — | false   |\r\n| size  | Checkbox 的尺寸，仅在 border 为真时有效  | string  | medium / small / mini | — |\r\n| name | 原生 name 属性 | string    |      —         |     —    |\r\n| checked  | 当前是否勾选    | boolean   |  — | false   |\r\n| indeterminate  | 设置 indeterminate 状态，只负责样式控制    | boolean   |  — | false   |\r\n\r\n### Checkbox Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| change  | 当绑定值变化时触发的事件 | 更新后的值 |\r\n\r\n### Checkbox-group Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model | 绑定值 | array | — | — |\r\n| size     | 多选框组尺寸，仅对按钮形式的 Checkbox 或带有边框的 Checkbox 有效   | string  | medium / small / mini  |    —     |\r\n| disabled  | 是否禁用    | boolean   | — | false   |\r\n| min     | 可被勾选的 checkbox 的最小数量   | number    |       —        |     —    |\r\n| max     | 可被勾选的 checkbox 的最大数量   | number    |       —        |     —    |\r\n| text-color  | 按钮形式的 Checkbox 激活时的文本颜色    | string   | — | #ffffff   |\r\n| fill  | 按钮形式的 Checkbox 激活时的填充色和边框色    | string   | — | #409EFF   |\r\n\r\n### Checkbox-group Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| change  | 当绑定值变化时触发的事件 | 更新后的值 |\r\n\r\n### Checkbox-button Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| label     | 选中状态的值（只有在`checkbox-group`或者绑定对象类型为`array`时有效）| string / number / boolean  |       —        |     —    |\r\n| true-label | 选中时的值   | string / number | — |     —    |\r\n| false-label | 没有选中时的值   | string / number    |      —         |     —    |\r\n| disabled  | 是否禁用    | boolean   |  — | false   |\r\n| name | 原生 name 属性 | string    |      —         |     —    |\r\n| checked  | 当前是否勾选    | boolean   |  — | false   |\r\n\r\n\r\n## 更新日志\r\n\r\n### V16.0.1\r\n\r\n* 修复数据回显bug\r\n\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-datepicker\\readme.md":{"name":"v2-form-datepicker","title":"","type":"component","content":"\r\n# DatePicker 日期选择器\r\n\r\n用于选择或输入日期\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### placeholder\r\n\r\n用户未选择任何选项时显示的占位文本。\r\n\r\n#### 选中值\r\n\r\n当前选中的日期值，可绑定数据。值的格式取决于[赋值格式](#赋值格式)\r\n\r\n#### 是否禁用\r\n\r\n`true`: 禁用\r\n\r\n`false`: 不禁用\r\n\r\n#### 显示格式\r\n\r\n选中的日期值的显示格式（显示给用户的格式）。参见[日期格式](#日期格式)\r\n\r\n#### 赋值格式\r\n\r\n选中的日期值的数据格式（程序中使用的格式）。参见[日期格式](#日期格式)\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n#### 日期单位\r\n\r\n- `date` 日\r\n- `week` 周\r\n- `month` 月\r\n- `year` 年\r\n- `dates` 多个日期\r\n- `daterange` 日期范围\r\n\r\n#### 对齐方式\r\n\r\n- `left` 左\r\n- `center` 中\r\n- `right` 右\r\n\r\n#### 禁用日期方式\r\n\r\n- `null` 无\r\n- `list` 数组\r\n- `listVar` 数组变量\r\n- `method` 方法\r\n\r\n默认不禁用即无；数组模式，在开始时间与结束时间填写2020-03-05这种格式的日期以添加日期禁用区间；\r\n\r\n数组变量模式格式如下：\r\n```\r\n[{start:'2020-5-10',end:'2020-5-27'}]\r\n```\r\n\r\n方法模式需要绑定方法（方法名使用常量），示例如下：\r\n```\r\nconst ctx = this;\r\nlet result = false;\r\n[{start:'2020-5-10',end:'2020-5-27'}].forEach(item => {\r\n    //item 是一个时间段\r\n    if (\r\n        time.getTime() > new Date(item.start).getTime() &&\r\n        time.getTime() < new Date(item.end).getTime()\r\n    ) {\r\n        result = true;\r\n    }\r\n});\r\nconsole.log('hahahahha')\r\nreturn result;\r\n```\r\n\r\n## Element用法\r\n\r\n### Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| value / v-model | 绑定值 | date(DatePicker) / array(DateRangePicker) | — | — |\r\n| readonly | 完全只读 | boolean | — | false |\r\n| disabled | 禁用 | boolean | — | false |\r\n| editable | 文本框可输入 | boolean | — | true |\r\n| clearable | 是否显示清除按钮 | boolean | — | true |\r\n| size          | 输入框尺寸     | string          | large, small, mini  | — |\r\n| placeholder | 非范围选择时的占位内容 | string | — | — |\r\n| start-placeholder | 范围选择时开始日期的占位内容 | string | — | — |\r\n| end-placeholder | 范围选择时结束日期的占位内容 | string | — | — |\r\n| type | 显示类型 | string | year/month/date/dates/ week/datetime/datetimerange/ daterange/monthrange | date |\r\n| format | 显示在输入框中的格式 | string | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | yyyy-MM-dd |\r\n| align | 对齐方式 | string | left, center, right | left |\r\n| popper-class | DatePicker 下拉框的类名 | string | — | — |\r\n| picker-options | 当前时间日期选择器特有的选项参考下表 | object |  — | {} |\r\n| range-separator | 选择范围时的分隔符 | string | — | '-' |\r\n| default-value | 可选，选择器打开时默认显示的时间 | Date | 可被`new Date()`解析 | — |\r\n| default-time | 范围选择时选中日期所使用的当日内具体时刻 | string[] | 数组，长度为 2，每项值为字符串，形如`12:00:00`，第一项指定开始日期的时刻，第二项指定结束日期的时刻，不指定会使用时刻 `00:00:00` | — |\r\n| value-format | 可选，绑定值的格式。不指定则绑定值为 Date 对象 | string | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | — |\r\n| name | 原生属性 | string | — | — |\r\n| unlink-panels | 在范围选择器里取消两个日期面板之间的联动 | boolean | — | false |\r\n| prefix-icon | 自定义头部图标的类名 | string | — | el-icon-date |\r\n| clear-icon | 自定义清空图标的类名 | string | — | el-icon-circle-close |\r\n| validate-event | 输入时是否触发表单的校验 | boolean | - | true |\r\n\r\n### Picker Options\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| shortcuts | 设置快捷选项，需要传入 { text, onClick } 对象用法参考 demo 或下表 | Object[] | — | — |\r\n| disabledDate | 设置禁用状态，参数为当前日期，要求返回 Boolean | Function | — | — |\r\n| cellClassName | 设置日期的 className | Function(Date) | — | — |\r\n| firstDayOfWeek | 周起始日 | Number | 1 到 7 | 7 |\r\n| onPick | 选中日期后会执行的回调，只有当 `daterange` 或 `datetimerange` 才生效 | Function({ maxDate, minDate }) | — | — |\r\n\r\n### Shortcuts\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| text | 标题文本 | string | — | — |\r\n| onClick | 选中后的回调函数，参数是 vm，可通过触发 'pick' 事件设置选择器的值。例如 vm.$emit('pick', new Date()) | function | — | — |\r\n\r\n### Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------|--------|---------|\r\n| change | 用户确认选定的值时触发 | 组件绑定值。格式与绑定值一致，可受 `value-format` 控制 |\r\n| blur | 当 input 失去焦点时触发 | 组件实例 |\r\n| focus | 当 input 获得焦点时触发 | 组件实例 |\r\n\r\n### Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| focus | 使 input 获取焦点 | — |\r\n\r\n\r\n\r\n## DateTimePicker 日期时间选择器\r\n\r\n### Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| value / v-model | 绑定值 | date(DateTimePicker) / array(DateTimeRangePicker) | — | — |\r\n| readonly | 完全只读 | boolean | — | false |\r\n| disabled | 禁用 | boolean | — | false |\r\n| editable | 文本框可输入 | boolean | — | true |\r\n| clearable | 是否显示清除按钮 | boolean | — | true |\r\n| size          | 输入框尺寸     | string          | large, small, mini  | — |\r\n| placeholder | 非范围选择时的占位内容 | string | — | — |\r\n| start-placeholder | 范围选择时开始日期的占位内容 | string | — | — |\r\n| end-placeholder | 范围选择时结束日期的占位内容 | string | — | — |\r\n| time-arrow-control | 是否使用箭头进行时间选择 | boolean | — | false |\r\n| type | 显示类型 | string | year/month/date/week/ datetime/datetimerange/daterange | date |\r\n| format | 显示在输入框中的格式 | string | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | yyyy-MM-dd HH:mm:ss |\r\n| align | 对齐方式 | string | left, center, right | left |\r\n| popper-class | DateTimePicker 下拉框的类名 | string | — | — |\r\n| picker-options | 当前时间日期选择器特有的选项参考下表 | object |  — | {} |\r\n| range-separator | 选择范围时的分隔符 | string | - | '-' |\r\n| default-value | 可选，选择器打开时默认显示的时间 | Date | 可被`new Date()`解析 | — |\r\n| default-time | 选中日期后的默认具体时刻 | 非范围选择时：string / 范围选择时：string[] | 非范围选择时：形如`12:00:00`的字符串；范围选择时：数组，长度为 2，每项值为字符串，形如`12:00:00`，第一项指定开始日期的时刻，第二项指定结束日期的时刻。不指定会使用时刻 `00:00:00` | — |\r\n| value-format | 可选，绑定值的格式。不指定则绑定值为 Date 对象 | string | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | — |\r\n| name | 原生属性 | string | — | — |\r\n| unlink-panels | 在范围选择器里取消两个日期面板之间的联动 | boolean | — | false |\r\n| prefix-icon | 自定义头部图标的类名 | string | — | el-icon-date |\r\n| clear-icon | 自定义清空图标的类名 | string | — | el-icon-circle-close |\r\n\r\n### Picker Options\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| shortcuts | 设置快捷选项，需要传入 { text, onClick } 对象用法参考 demo 或下表 | Object[] | — | — |\r\n| disabledDate | 设置禁用状态，参数为当前日期，要求返回 Boolean | Function | — | — |\r\n| cellClassName | 设置日期的 className | Function(Date) | — | — |\r\n| firstDayOfWeek | 周起始日 | Number | 1 到 7 | 7 |\r\n\r\n### Shortcuts\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| text | 标题文本 | string | — | — |\r\n| onClick | 选中后的回调函数，参数是 vm，可通过触发 'pick' 事件设置选择器的值。例如 vm.$emit('pick', new Date()) | function | — | — |\r\n\r\n### Events\r\n| Event Name | Description | Parameters |\r\n|---------|--------|---------|\r\n| change | 用户确认选定的值时触发 | 组件绑定值。格式与绑定值一致，可受 `value-format` 控制 |\r\n| blur | 当 input 失去焦点时触发 | 组件实例 |\r\n| focus | 当 input 获得焦点时触发 | 组件实例 |\r\n\r\n### Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| focus | 使 input 获取焦点 | — |\r\n\r\n### Slots\r\n| Name    | 说明         |\r\n|---------|-------------|\r\n| range-separator  | 自定义分隔符 |\r\n\r\n## 更新日志\r\n<!--更新日志 Start-->\r\n\r\n### 16.0.1\r\n\r\n更新组件有时间范围选择,在范围选择器里取消两个日期面板之间的联动\r\n\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-editor\\readme.md":{"name":"v2-form-editor","title":"富文本","type":"component","content":"## 富文本\r\n\r\n参见 [WangEditor 使用手册](https://www.kancloud.cn/wangfupeng/wangeditor3/332599)\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-input\\readme.md":{"name":"v2-form-input","title":"Input 输入框","type":"component","content":"# Input 输入框\r\n\r\n通过鼠标或键盘输入字符\r\n\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### placeholder\r\n\r\n用户未选择任何选项时显示的占位文本。\r\n\r\n#### 输入值\r\n\r\n当前用户输入的文本值，可绑定数据。\r\n\r\n#### 是否禁填\r\n\r\n填写或绑定布尔值，`true` 禁填 ，`false` 正常\r\n\r\n#### 前置\r\n\r\n文本域的前置标签。\r\n\r\n#### 后置\r\n\r\n文本域的后置标签。\r\n\r\n#### 最大长度\r\n\r\n输入内容的最大允许字数。\r\n\r\n#### 最小长度\r\n\r\n输入内容的最小允许字数。\r\n\r\n#### 头部图标\r\n\r\n在左侧显示的图标的名字。例如 `el-icon-delete` `el-icon-goods` `el-icon-info`\r\n\r\n提供的图标列表可参考 [Element UI Icon 组件](https://element.eleme.io/#/zh-CN/component/icon)\r\n\r\n#### 尾部图标\r\n\r\n在右侧显示的图标的名字。例如 `el-icon-delete` `el-icon-goods` `el-icon-info`\r\n\r\n提供的图标列表可参考 [Element UI Icon 组件](https://element.eleme.io/#/zh-CN/component/icon)\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n#### 类型\r\n\r\n- `text` 单行文本\r\n- `textarea` 多行文本\r\n- `password` 密码框\r\n\r\n## Element用法\r\n\r\n### Input Attributes\r\n\r\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\r\n|-------------  |---------------- |---------------- |---------------------- |-------- |\r\n| type         | 类型   | string  | text，textarea 和其他 [原生 input 的 type 值](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types) | text |\r\n| value / v-model | 绑定值           | string / number  | — | — |\r\n| maxlength     | 原生属性，最大输入长度      | number          |  —  | — |\r\n| minlength     | 原生属性，最小输入长度      | number          | — | — |\r\n| show-word-limit | 是否显示输入字数统计，只在 `type = \"text\"` 或 `type = \"textarea\"` 时有效 | boolean    |  —  | false |\r\n| placeholder   | 输入框占位文本    | string          | — | — |\r\n| clearable     | 是否可清空        | boolean         | — | false |\r\n| show-password | 是否显示切换密码图标| boolean         | — | false |\r\n| disabled      | 禁用            | boolean         | — | false   |\r\n| size          | 输入框尺寸，只在 `type!=\"textarea\"` 时有效      | string          | medium / small / mini  | — |\r\n| prefix-icon   | 输入框头部图标    | string          | — | — |\r\n| suffix-icon   | 输入框尾部图标    | string          | — | — |\r\n| rows          | 输入框行数，只对 `type=\"textarea\"` 有效  |  number | — |  2   |\r\n| autosize      | 自适应内容高度，只对 `type=\"textarea\"` 有效，可传入对象，如，{ minRows: 2, maxRows: 6 }  |  boolean / object | — |  false   |\r\n| autocomplete | 原生属性，自动补全 | string | on, off | off |\r\n| auto-complete | 下个主版本弃用 | string | on, off | off |\r\n| name | 原生属性 | string | — | — |\r\n| readonly | 原生属性，是否只读 | boolean | — | false |\r\n| max | 原生属性，设置最大值 | — | — | — |\r\n| min | 原生属性，设置最小值 | — | — | — |\r\n| step | 原生属性，设置输入字段的合法数字间隔 | — | — | — |\r\n| resize | 控制是否能被用户缩放 | string | none, both, horizontal, vertical | — |\r\n| autofocus | 原生属性，自动获取焦点 | boolean | true, false | false |\r\n| form | 原生属性 | string | — | — |\r\n| label | 输入框关联的label文字 | string | — | — |\r\n| tabindex | 输入框的tabindex | string | - | - |\r\n| validate-event | 输入时是否触发表单的校验 | boolean | - | true |\r\n\r\n### Input Slots\r\n| name | 说明 |\r\n|------|--------|\r\n| prefix | 输入框头部内容，只对 `type=\"text\"` 有效 |\r\n| suffix | 输入框尾部内容，只对 `type=\"text\"` 有效 |\r\n| prepend | 输入框前置内容，只对 `type=\"text\"` 有效 |\r\n| append | 输入框后置内容，只对 `type=\"text\"` 有效 |\r\n\r\n### Input Events\r\n| 事件名称 | 说明 | 回调参数 |\r\n|---------|--------|---------|\r\n| blur | 在 Input 失去焦点时触发 | (event: Event) |\r\n| focus | 在 Input 获得焦点时触发 | (event: Event) |\r\n| change | 仅在输入框失去焦点或用户按下回车时触发 | (value: string \\| number) |\r\n| input | 在 Input 值改变时触发 | (value: string \\| number) |\r\n| clear | 在点击由 `clearable` 属性生成的清空按钮时触发 | — |\r\n\r\n### Input Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| focus | 使 input 获取焦点 | — |\r\n| blur | 使 input 失去焦点 | — |\r\n| select | 选中 input 中的文字 | — |\r\n\r\n### Autocomplete Attributes\r\n\r\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\r\n|-------------  |---------------- |---------------- |---------------------- |-------- |\r\n| placeholder   | 输入框占位文本   | string          | — | — |\r\n| disabled      | 禁用            | boolean         | — | false   |\r\n| value-key | 输入建议对象中用于显示的键名 | string | — | value |\r\n| value         | 必填值，输入绑定值   | string  | — | — |\r\n| debounce      | 获取输入建议的去抖延时 | number         | — | 300 |\r\n| placement     | 菜单弹出位置 | string         | top / top-start / top-end / bottom / bottom-start / bottom-end | bottom-start |\r\n| fetch-suggestions | 返回输入建议的方法，仅当你的输入建议数据 resolve 时，通过调用 callback(data:[]) 来返回它  | Function(queryString, callback)  | — | — |\r\n| popper-class | Autocomplete 下拉列表的类名 | string | — | — |\r\n| trigger-on-focus | 是否在输入框 focus 时显示建议列表 | boolean | — | true |\r\n| name | 原生属性 | string | — | — |\r\n| select-when-unmatched | 在输入没有任何匹配建议的情况下，按下回车是否触发 `select` 事件 | boolean | — | false |\r\n| label | 输入框关联的label文字 | string | — | — |\r\n| prefix-icon | 输入框头部图标 | string | — | — |\r\n| suffix-icon | 输入框尾部图标 | string | — | — |\r\n| hide-loading | 是否隐藏远程加载时的加载图标 | boolean | — | false |\r\n| popper-append-to-body | 是否将下拉列表插入至 body 元素。在下拉列表的定位出现问题时，可将该属性设置为 false | boolean | - | true |\r\n| highlight-first-item | 是否默认突出显示远程搜索建议中的第一项 | boolean | — | false |\r\n\r\n### Autocomplete Slots\r\n| name | 说明 |\r\n|------|--------|\r\n| prefix | 输入框头部内容 |\r\n| suffix | 输入框尾部内容 |\r\n| prepend | 输入框前置内容 |\r\n| append | 输入框后置内容 |\r\n\r\n### Autocomplete Scoped Slot\r\n| name | 说明 |\r\n|------|--------|\r\n| — | 自定义输入建议，参数为 { item } |\r\n\r\n### Autocomplete Events\r\n| 事件名称 | 说明 | 回调参数 |\r\n|---------|--------|---------|\r\n| select | 点击选中建议项时触发 | 选中建议项 |\r\n\r\n### Autocomplete Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| focus | 使 input 获取焦点 | - |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-inputnumber\\readme.md":{"name":"v2-form-inputnumber","title":"InputNumber 计数器","type":"component","content":"# InputNumber 计数器\r\n\r\n仅允许输入标准的数字值，可定义范围\r\n\r\n\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### 选择值\r\n\r\n当前用户输入的数值，可绑定数据。\r\n\r\n#### 是否禁用\r\n\r\n`true`: 禁用\r\n\r\n`false`: 不禁用\r\n\r\n#### 最小值\r\n\r\n输入数值的下限。\r\n\r\n#### 最大值\r\n\r\n输入数值的上限。\r\n\r\n#### 步幅\r\n\r\n每次点击 +/- 按钮，数值 增加/减少 的量。\r\n\r\n#### 精度\r\n\r\n一个非负整数 N, 表示精确到小数点后第 N 位，不能小于步幅的小数位数。\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n## Element用法\r\n\r\n### Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|----------|-------------- |----------|--------------------------------  |-------- |\r\n| value / v-model    | 绑定值         | number | — | 0 |\r\n| min      | 设置计数器允许的最小值 | number | — | -Infinity |\r\n| max      | 设置计数器允许的最大值 | number | — | Infinity |\r\n| step     | 计数器步长           | number   | — | 1 |\r\n| step-strictly | 是否只能输入 step 的倍数 | number   | — | false |\r\n| precision| 数值精度             | number   | — | — |\r\n| size     | 计数器尺寸           | string   | large, small | — |\r\n| disabled | 是否禁用计数器        | boolean | — | false |\r\n| controls | 是否使用控制按钮        | boolean | — | true |\r\n| controls-position | 控制按钮位置 | string | right | - |\r\n| name | 原生属性 | string | — | — |\r\n| label | 输入框关联的label文字 | string | — | — |\r\n| placeholder | 输入框默认 placeholder | string | - | - |\r\n\r\n### Events\r\n| 事件名称 | 说明 | 回调参数 |\r\n|---------|--------|---------|\r\n| change | 绑定值被改变时触发 | currentValue, oldValue |\r\n| blur | 在组件 Input 失去焦点时触发 | (event: Event) |\r\n| focus | 在组件 Input 获得焦点时触发 | (event: Event) |\r\n\r\n### Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| focus | 使 input 获取焦点 | - |\r\n| select | 选中 input 中的文字 | — |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-mdeditor\\readme.md":{"name":"v2-form-mdeditor","title":"Mardown编辑器","type":"component","content":"# Mardown编辑器\r\n\r\n编辑markdown并预览\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 输入值\r\n编辑器中的文本会被传递到这个选项绑定的值\r\n\r\n#### 禁用\r\n是否不可编辑\r\n\r\n#### 仅浏览\r\n不提供编辑功能,仅可以浏览\r\n\r\n#### 工具栏图标\r\n\r\n- `full` 全部显示\r\n- `simple` 简单的\r\n- `mini` 最小的\r\n- `none` 不显示\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n#### 允许上传图片\r\n允许用户选择文件并上传,打开后需要设置上传地址和上传回调  \r\n若关闭则用户仅可以通过填写url方式插入图片\r\n\r\n#### 上传地址\r\n上传图片接口地址\r\n\r\n#### 上传回调\r\n填写一个方法篮子的方法,不用点绑定  \r\n有2个参数,分别是response, file  \r\n需要返回字符串图片地址  \r\n下面是写在方法篮子的示例代码  \r\n\r\n```javascript\r\n// 添加一个response参数\r\nconst ctx = this;\r\n// 假设上传接口响应体是以下结构\r\n// {\r\n//   content: {\r\n//     data: [\"/uploaded/1575360188012.png\"]\r\n//   }\r\n//   errorCode: null\r\n//   errorMsg: null\r\n//   status: true\r\n// }\r\n// 那么我需要返回图片地址\r\nreturn response.content.data[0]\r\n// /uploaded/1575360188012.png\r\n```\r\n\r\n这样出现在用户画面的就是\r\n```\r\n![img](/uploaded/1575360188012.png)\r\n```\r\n\r\n#### 流程图\r\n编写方法可以看这个地方 [http://flowchart.js.org/](http://flowchart.js.org/)\r\n\r\n例子\r\n```flow\r\nst=>start: User login\r\nop=>operation: Operation\r\ncond=>condition: Successful Yes or No?\r\ne=>end: Into admin\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-radio\\readme.md":{"name":"v2-form-radio","title":"Radio 单选框","type":"component","content":"# Radio 单选框\r\n\r\n在一组备选项中进行单选\r\n\r\n## WEBIDE用法\r\n\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### 输入值\r\n\r\n当前被选中的选项的值，可以绑定数据使用。\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n#### 选项列表\r\n```\r\n[\r\n  {\r\n    \"text\": 0,\r\n    \"label\": \"选项一\",\r\n    \"disable\": true\r\n  },\r\n  {\r\n    \"text\": 1,\r\n    \"label\": \"选项二\",\r\n    \"disable\": false\r\n  }\r\n]\r\n```\r\n\r\n\r\n\r\n## Element用法\r\n\r\n### Radio Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model | 绑定值 | string / number / boolean | — | — |\r\n| label     | Radio 的 value   | string / number / boolean    |       —        |      —   |\r\n| disabled  | 是否禁用    | boolean   | — | false   |\r\n| border  | 是否显示边框  | boolean   | — | false   |\r\n| size  | Radio 的尺寸，仅在 border 为真时有效  | string  | medium / small / mini | — |\r\n| name | 原生 name 属性 | string    |      —         |     —    |\r\n\r\n### Radio Events\r\n| 事件名称 | 说明 | 回调参数 |\r\n|---------- |-------- |---------- |\r\n| change  | 绑定值变化时触发的事件 |  选中的 Radio label 值  |\r\n\r\n### Radio-group Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model | 绑定值 | string / number / boolean | — | — |\r\n| size     | 单选框组尺寸，仅对按钮形式的 Radio 或带有边框的 Radio 有效   | string  | medium / small / mini |    —     |\r\n| disabled  | 是否禁用    | boolean   | — | false   |\r\n| text-color  | 按钮形式的 Radio 激活时的文本颜色    | string   | — | #ffffff   |\r\n| fill  | 按钮形式的 Radio 激活时的填充色和边框色    | string   | — | #409EFF   |\r\n\r\n### Radio-group Events\r\n| 事件名称 | 说明 | 回调参数 |\r\n|---------- |-------- |---------- |\r\n| change  | 绑定值变化时触发的事件 |  选中的 Radio label 值  |\r\n\r\n### Radio-button Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| label     | Radio 的 value  | string / number  |        —       |     —    |\r\n| disabled  | 是否禁用    | boolean   | — | false   |\r\n| name | 原生 name 属性 | string    |      —         |     —    |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-select\\readme.md":{"name":"v2-form-select","title":"Select 选择器","type":"component","content":"# Select 选择器\r\n\r\n当选项过多时，使用下拉菜单展示并选择内容。\r\n\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 当前选中值\r\n\r\n现在正被选中的选项的值，可以绑定数据。\r\n\r\n#### 是否禁填\r\n\r\n`true` (禁填), `false` (不禁填)\r\n\r\n#### 标题文本\r\n\r\n显示在输入框左侧的文本。\r\n\r\n#### 标题宽度\r\n\r\n输入框左侧文本区域的宽度，格式为 CSS 宽度。\r\n\r\n#### 占位文本\r\n\r\n用户未选择任何选项时显示的占位文本。\r\n\r\n#### 下拉列表\r\n```\r\n[\r\n  {\r\n    \"value\": 0,\r\n    \"label\": \"选项一\"\r\n  },\r\n  {\r\n    \"value\": 1,\r\n    \"label\": \"选项二\"\r\n  }\r\n]\r\n```\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n\r\n\r\n## Element用法\r\n\r\n### Select Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| value / v-model | 绑定值 | boolean / string / number | — | — |\r\n| multiple | 是否多选 | boolean | — | false |\r\n| disabled | 是否禁用 | boolean | — | false |\r\n| value-key | 作为 value 唯一标识的键名，绑定值为对象类型时必填 | string | — | value |\r\n| size | 输入框尺寸 | string | medium/small/mini | — |\r\n| clearable | 是否可以清空选项 | boolean | — | false |\r\n| collapse-tags | 多选时是否将选中值按文字的形式展示 | boolean | — | false |\r\n| multiple-limit | 多选时用户最多可以选择的项目数，为 0 则不限制 | number | — | 0 |\r\n| name | select input 的 name 属性 | string | — | — |\r\n| autocomplete | select input 的 autocomplete 属性 | string | — | off |\r\n| auto-complete | 下个主版本弃用 | string | — | off |\r\n| placeholder | 占位符 | string | — | 请选择 |\r\n| filterable | 是否可搜索 | boolean | — | false |\r\n| allow-create | 是否允许用户创建新条目，需配合 `filterable` 使用 | boolean | — | false |\r\n| filter-method | 自定义搜索方法 | function | — | — |\r\n| remote | 是否为远程搜索 | boolean | — | false |\r\n| remote-method | 远程搜索方法 | function | — | — |\r\n| loading | 是否正在从远程获取数据 | boolean | — | false |\r\n| loading-text | 远程加载时显示的文字 | string | — | 加载中 |\r\n| no-match-text | 搜索条件无匹配时显示的文字，也可以使用`slot=\"empty\"`设置 | string | — | 无匹配数据 |\r\n| no-data-text | 选项为空时显示的文字，也可以使用`slot=\"empty\"`设置 | string | — | 无数据 |\r\n| popper-class | Select 下拉框的类名 | string | — | — |\r\n| reserve-keyword | 多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词 | boolean | — | false |\r\n| default-first-option | 在输入框按下回车，选择第一个匹配项。需配合 `filterable` 或 `remote` 使用 | boolean | - | false |\r\n| popper-append-to-body | 是否将弹出框插入至 body 元素。在弹出框的定位出现问题时，可将该属性设置为 false | boolean | - | true |\r\n| automatic-dropdown | 对于不可搜索的 Select，是否在输入框获得焦点后自动弹出选项菜单 | boolean | - | false |\r\n\r\n### Select Events\r\n| 事件名称 | 说明 | 回调参数 |\r\n|---------|---------|---------|\r\n| change | 选中值发生变化时触发 | 目前的选中值 |\r\n| visible-change | 下拉框出现/隐藏时触发 | 出现则为 true，隐藏则为 false |\r\n| remove-tag | 多选模式下移除tag时触发 | 移除的tag值 |\r\n| clear | 可清空的单选模式下用户点击清空按钮时触发 | — |\r\n| blur | 当 input 失去焦点时触发 | (event: Event) |\r\n| focus | 当 input 获得焦点时触发 | (event: Event) |\r\n\r\n### Select Slots\r\n|   name  | 说明     |\r\n|---------|---------|\r\n|    —    | Option 组件列表 |\r\n| prefix  | Select 组件头部内容 |\r\n| empty | 无选项时的列表 |\r\n\r\n### Option Group Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| label | 分组的组名 | string | — | — |\r\n| disabled | 是否将该分组下所有选项置为禁用 | boolean | — | false |\r\n\r\n### Option Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| value | 选项的值 | string/number/object | — | — |\r\n| label | 选项的标签，若不设置则默认与 `value` 相同 | string/number | — | — |\r\n| disabled | 是否禁用该选项 | boolean | — | false |\r\n\r\n### Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| focus | 使 input 获取焦点 | - |\r\n| blur | 使 input 失去焦点，并隐藏下拉框 | - |\r\n\r\n\r\n## 更新日志\r\n\r\n### V16.0.1\r\n\r\n* 增加下拉框多选功能\r\n\r\n### V16.0.4\r\n\r\n* 增加下拉框选项有前缀字段功能\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-slider\\readme.md":{"name":"v2-form-slider","title":"Slider 滑块","type":"component","content":"# Slider 滑块\r\n\r\n通过拖动滑块在一个固定区间内进行选择\r\n\r\n\r\n## WEBIDE用法\r\n\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### 滑块值\r\n\r\n当前用户输入的数值，可绑定数据。\r\n\r\n#### 是否禁用\r\n\r\n`true`: 禁用\r\n\r\n`false`: 不禁用\r\n\r\n#### 步长\r\n\r\n每次按下 →/← 键，滑块值 增加/减少 的量。\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n\r\n## Element用法\r\n\r\n### Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| value / v-model | 绑定值 | number | — | 0 |\r\n| min | 最小值 | number | — | 0 |\r\n| max | 最大值 | number | — | 100 |\r\n| disabled | 是否禁用 | boolean | — | false |\r\n| step | 步长 | number | — | 1 |\r\n| show-input | 是否显示输入框，仅在非范围选择时有效 | boolean | — | false |\r\n| show-input-controls | 在显示输入框的情况下，是否显示输入框的控制按钮 | boolean | — | true |\r\n| input-size | 输入框的尺寸 | string | large / medium / small / mini | small |\r\n| show-stops | 是否显示间断点 | boolean | — | false |\r\n| show-tooltip | 是否显示 tooltip | boolean | — | true |\r\n| format-tooltip | 格式化 tooltip message | function(value) | — | — |\r\n| range | 是否为范围选择 | boolean | — | false |\r\n| vertical | 是否竖向模式 | boolean | — | false |\r\n| height | Slider 高度，竖向模式时必填 | string | — | — |\r\n| label | 屏幕阅读器标签 | string | — | — |\r\n| debounce | 输入时的去抖延迟，毫秒，仅在`show-input`等于true时有效 | number | — | 300 |\r\n| tooltip-class | tooltip 的自定义类名 | string | — | — |\r\n| marks | 标记， key 的类型必须为 number 且取值在闭区间 `[min, max]` 内，每个标记可以单独设置样式 | object | — | — |\r\n\r\n### Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| change | 值改变时触发（使用鼠标拖曳时，只在松开鼠标后触发） | 改变后的值 |\r\n| input | 数据改变时触发（使用鼠标拖曳时，活动过程实时触发） | 改变后的值 |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-switch\\readme.md":{"name":"v2-form-switch","title":"Switch 开关","type":"component","content":"# Switch 开关\r\n\r\n表示两种相互对立的状态间的切换，多用于触发「开/关」。\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### 开关的值\r\n\r\n当前用户输入的值 (ON=true, OFF=false), 可绑定数据。\r\n\r\n#### 激活的文本\r\n\r\nON 状态的名字\r\n\r\n#### 未激活的文本\r\n\r\nOFF 状态的名字\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n## Element用法\r\n\r\n### Attributes\r\n\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model | 绑定值 | boolean / string / number | — | — |\r\n| disabled  | 是否禁用    | boolean   | — | false   |\r\n| width  | switch 的宽度（像素）    | number   | — | 40 |\r\n| active-icon-class  | switch 打开时所显示图标的类名，设置此项会忽略 `active-text`    | string   | — | — |\r\n| inactive-icon-class  | switch 关闭时所显示图标的类名，设置此项会忽略 `inactive-text`    | string   | — | — |\r\n| active-text  | switch 打开时的文字描述    | string   | — | — |\r\n| inactive-text  | switch 关闭时的文字描述    | string   | — | — |\r\n| active-value  | switch 打开时的值    | boolean / string / number | — | true |\r\n| inactive-value  | switch 关闭时的值    | boolean / string / number | — | false |\r\n| active-color  | switch 打开时的背景色    | string   | — | #409EFF |\r\n| inactive-color  | switch 关闭时的背景色    | string   | — | #C0CCDA |\r\n| name            | switch 对应的 name 属性    | string   | — | — |\r\n| validate-event  | 改变 switch 状态时是否触发表单的校验     | boolean   | - | true |\r\n\r\n### Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| change  | switch 状态发生变化时的回调函数    | 新状态的值 |\r\n\r\n### Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| focus | 使 Switch 获取焦点 | - |"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-timepicker\\readme.md":{"name":"v2-form-timepicker","title":"TimePicker 时间选择器","type":"component","content":"# TimePicker 时间选择器\r\n\r\n 用于选择或输入日期\r\n\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 是否禁填\r\n\r\n`true`: 禁用\r\n\r\n`false`: 不禁用\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### placeholder\r\n\r\n用户未选择任何选项时显示的占位文本。\r\n\r\n#### 选择值\r\n\r\n当前选中的时间值（格式为 Date 对象），可绑定数据。\r\n\r\n#### 时间范围起始文本\r\n\r\n例如`从` `自`\r\n\r\n#### 时间范围中间文本\r\n\r\n例如`至` `到`\r\n\r\n#### 时间范围结束文本\r\n\r\n例如`为止`\r\n\r\n#### 类型\r\n\r\n- `select` 固定时间范围\r\n- `picker` 任意时间点\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n\r\n\r\n## Element用法\r\n\r\n### Attributes\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| value / v-model | 绑定值 | date(TimePicker) / string(TimeSelect) | — | — |\r\n| readonly | 完全只读 | boolean | — | false |\r\n| disabled | 禁用 | boolean | — | false |\r\n| editable | 文本框可输入 | boolean | — | true |\r\n| clearable | 是否显示清除按钮 | boolean | — | true |\r\n| size          | 输入框尺寸     | string          | medium / small / mini  | — |\r\n| placeholder | 非范围选择时的占位内容 | string | — | — |\r\n| start-placeholder | 范围选择时开始日期的占位内容 | string | — | — |\r\n| end-placeholder | 范围选择时开始日期的占位内容 | string | — | — |\r\n| is-range | 是否为时间范围选择，仅对`<el-time-picker>`有效 | boolean | — | false |\r\n| arrow-control | 是否使用箭头进行时间选择，仅对`<el-time-picker>`有效 | boolean | — | false |\r\n| align | 对齐方式 | string | left / center / right | left |\r\n| popper-class | TimePicker 下拉框的类名 | string | — | — |\r\n| picker-options | 当前时间日期选择器特有的选项参考下表 | object | — | {} |\r\n| range-separator | 选择范围时的分隔符 | string | - | '-' |\r\n| value-format | 可选，仅TimePicker时可用，绑定值的格式。不指定则绑定值为 Date 对象 | string | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | — |\r\n| default-value | 可选，选择器打开时默认显示的时间 | Date(TimePicker) / string(TimeSelect) | 可被`new Date()`解析(TimePicker) / 可选值(TimeSelect) | — |\r\n| name | 原生属性 | string | — | — |\r\n| prefix-icon | 自定义头部图标的类名 | string | — | el-icon-time |\r\n| clear-icon | 自定义清空图标的类名 | string | — | el-icon-circle-close |\r\n\r\n### Time Select Options\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| start | 开始时间 | string | — | 09:00 |\r\n| end | 结束时间 | string | — | 18:00 |\r\n| step | 间隔时间 | string | — | 00:30 |\r\n| minTime | 最小时间，小于该时间的时间段将被禁用 | string | — | 00:00 |\r\n| maxTime | 最大时间，大于该时间的时间段将被禁用 | string | — | — |\r\n\r\n### Time Picker Options\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| selectableRange | 可选时间段，例如`'18:30:00 - 20:30:00'`或者传入数组`['09:30:00 - 12:00:00', '14:30:00 - 18:30:00']` | string / array | — | — |\r\n| format | 时间格式化(TimePicker) | string | 小时：`HH`，分：`mm`，秒：`ss`，AM/PM `A` | 'HH:mm:ss' |\r\n\r\n### Events\r\n| 事件名 | 说明 | 参数 |\r\n|---------|--------|---------|\r\n| change | 用户确认选定的值时触发 | 组件绑定值 |\r\n| blur | 当 input 失去焦点时触发 | 组件实例 |\r\n| focus | 当 input 获得焦点时触发 | 组件实例 |\r\n\r\n### Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| focus | 使 input 获取焦点 | - |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-transfer\\readme.md":{"name":"v2-form-transfer","title":"Transfer 穿梭框","type":"component","content":"# Transfer 穿梭框\r\n\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 选择值\r\n\r\n所有已选中的条目的 key 组成的数组，可进行数据绑定。`[0,1,3]`\r\n\r\n#### 配置项\r\n\r\n```\r\n[\r\n  {\r\n    \"label\": \"上海\",\r\n    \"key\": 0,\r\n    \"disabled\":false,\r\n    \"pinyin\": \"shanghai\"\r\n  },\r\n  {\r\n    \"label\": \"北京\",\r\n    \"key\": 1,\r\n    \"disabled\":false,\r\n    \"pinyin\": \"beijing\"\r\n  },\r\n  {\r\n    \"label\": \"广州\",\r\n    \"key\": 2,\r\n    \"disabled\":false,\r\n    \"pinyin\": \"guangzhou\"\r\n  },\r\n  {\r\n    \"label\": \"深圳\",\r\n    \"key\": 3,\r\n    \"disabled\":false,\r\n    \"pinyin\": \"shenzhen\"\r\n  },\r\n  {\r\n    \"label\": \"南京\",\r\n    \"key\": 4,\r\n    \"disabled\":false,\r\n    \"pinyin\": \"nanjing\"\r\n  },\r\n  {\r\n    \"label\": \"西安\",\r\n    \"key\": 5,\r\n    \"disabled\":false,\r\n    \"pinyin\": \"xian\"\r\n  },\r\n  {\r\n    \"label\": \"成都\",\r\n    \"key\": 6,\r\n    \"disabled\":false,\r\n    \"pinyin\": \"chengdu\"\r\n  }\r\n]\r\n```\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### 左标题\r\n\r\n左侧框的标题。\r\n\r\n#### 右标题\r\n\r\n右侧框的标题。\r\n\r\n#### 左按钮文本\r\n\r\n`向左传递`按钮上的文字。\r\n\r\n#### 右按钮文本\r\n\r\n`向右传递`按钮上的文字。\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n\r\n\r\n## Element用法\r\n\r\n### Attributes\r\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\r\n|---------- |-------- |---------- |-------------  |-------- |\r\n| value / v-model | 绑定值 | array | — | — |\r\n| data | Transfer 的数据源 | array[{ key, label, disabled }] | — | [ ] |\r\n| filterable | 是否可搜索 | boolean | — | false |\r\n| filter-placeholder | 搜索框占位符 | string | — | 请输入搜索内容 |\r\n| filter-method | 自定义搜索方法 | function | — | — |\r\n| target-order | 右侧列表元素的排序策略：若为 `original`，则保持与数据源相同的顺序；若为 `push`，则新加入的元素排在最后；若为 `unshift`，则新加入的元素排在最前 | string | original / push / unshift | original |\r\n| titles | 自定义列表标题 | array | — | ['列表 1', '列表 2'] |\r\n| button-texts | 自定义按钮文案 | array | — | [ ] |\r\n| render-content | 自定义数据项渲染函数 | function(h, option) | — | — |\r\n| format | 列表顶部勾选状态文案 | object{noChecked, hasChecked} | — | { noChecked: '${checked}/${total}', hasChecked: '${checked}/${total}' } |\r\n| props | 数据源的字段别名 | object{key, label, disabled} | — | — |\r\n| left-default-checked | 初始状态下左侧列表的已勾选项的 key 数组 | array | — | [ ] |\r\n| right-default-checked | 初始状态下右侧列表的已勾选项的 key 数组 | array | — | [ ] |\r\n\r\n### Slot\r\n| name | 说明 |\r\n|------|--------|\r\n| left-footer | 左侧列表底部的内容 |\r\n| right-footer | 右侧列表底部的内容 |\r\n\r\n### Scoped Slot\r\n| name | 说明 |\r\n|------|--------|\r\n| — | 自定义数据项的内容，参数为 { option } |\r\n\r\n### Methods\r\n| 方法名 | 说明 | 参数 |\r\n| ---- | ---- | ---- |\r\n| clearQuery | 清空某个面板的搜索关键词 | 'left' / 'right'，指定需要清空的面板 |\r\n\r\n### Events\r\n| 事件名称      | 说明    | 回调参数      |\r\n|---------- |-------- |---------- |\r\n| change | 右侧列表元素变化时触发 | 当前值、数据移动的方向（'left' / 'right'）、发生移动的数据 key 数组 |\r\n| left-check-change | 左侧列表元素被用户选中 / 取消选中时触发 | 当前被选中的元素的 key 数组、选中状态发生变化的元素的 key 数组 |\r\n| right-check-change | 右侧列表元素被用户选中 / 取消选中时触发 | 当前被选中的元素的 key 数组、选中状态发生变化的元素的 key 数组 |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-treeselect\\readme.md":{"name":"v2-form-treeselect","title":"树形下拉","type":"component","content":"# 树形下拉\r\n\r\n#### 当前选中值\r\n下拉树中选中的选项会以[value1,value2,...]的方式保存在这个绑定的属性\r\n\r\n#### 是否禁用\r\n禁用这个选项框\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n#### 初始数据定义\r\n默认方式是在绑定一个变量,格式在下一条的示例数据  \r\n字段映射方式是使用webide配置选项  \r\n字段映射方式最多嵌套3层,默认方式不限制\r\n\r\n#### 下拉树数据\r\n\r\nlabel 显示的名称(必须)  \r\nvalue 当前选中值数组所使用的值,不显示在界面(必须)  \r\nexpanded 默认展开这个节点  \r\nchecked 默认选中这个节点  \r\n\r\n单个节点\r\n```\r\n{\r\n  label: '选项一',\r\n  value: '1',\r\n  expanded: false,\r\n  checked: true,\r\n  children: []\r\n}\r\n```\r\n\r\n示例数据如下：\r\n```\r\n [\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": false\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"expanded\": true,\r\n        \"checked\": false,\r\n        \"children\": [\r\n          {\r\n            \"label\": \"三级 1-2-1\",\r\n            \"value\": \"1-2-1\",\r\n            \"checked\": false\r\n          },\r\n          {\r\n            \"label\": \"三级 1-2-2\",\r\n            \"value\": \"1-2-2\",\r\n            \"checked\": false\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n#### 是否仅包含叶节点(leafOnly)\r\n当这个值为`true`时,当前选中值不包含非叶子数据  \r\n当这个值为`false`时,当前选中值包含所有子树都被选中的节点的值\r\n例如\r\n```\r\n[\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": true\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"checked\": false\r\n      }\r\n    ]\r\n  }\r\n]\r\n// leafOnly === true\r\n// value -> [\"1-1\"]\r\n```\r\n```\r\n[\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": true\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"checked\": true\r\n      }\r\n    ]\r\n  }\r\n]\r\n// leafOnly === true\r\n// value -> [\"1-1\",\"1-2\"]\r\n```\r\n```\r\n[\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": true\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"checked\": true\r\n      }\r\n    ]\r\n  }\r\n]\r\n// leafOnly === false\r\n// value -> [\"1\",\"1-1\",\"1-2\"]\r\n```\r\n```\r\n[\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"checked\": false\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"checked\": true\r\n      }\r\n    ]\r\n  }\r\n]\r\n// leafOnly === false\r\n// value -> [\"1-2\"]\r\n```\r\n#### 分隔符\r\n显示在输入框的数据的分隔符\r\n\r\n#### 附五级嵌套树\r\n```\r\n [\r\n  {\r\n    \"label\": \"一级 1\",\r\n    \"value\": \"1\",\r\n    \"expanded\": true,\r\n    \"checked\": false,\r\n    \"children\": [\r\n      {\r\n        \"label\": \"二级 1-1\",\r\n        \"value\": \"1-1\",\r\n        \"expanded\": false,\r\n        \"checked\": false,\r\n        \"children\": [\r\n          {\r\n            \"label\": \"三级 1-1-1\",\r\n            \"value\": \"1-1-1\",\r\n            \"checked\": true\r\n          },\r\n          {\r\n            \"label\": \"三级 1-1-2\",\r\n            \"value\": \"1-1-2\",\r\n            \"checked\": false\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"label\": \"二级 1-2\",\r\n        \"value\": \"1-2\",\r\n        \"expanded\": true,\r\n        \"checked\": false,\r\n        \"children\": [\r\n          {\r\n            \"label\": \"三级 1-2-1\",\r\n            \"value\": \"1-2-1\",\r\n            \"expanded\": true,\r\n            \"checked\": false,\r\n            \"children\": [\r\n              {\r\n                \"label\": \"四级 1-2-1-1\",\r\n                \"value\": \"1-2-1-1\",\r\n                \"checked\": false,\r\n                \"children\": [\r\n                  {\r\n                    \"label\": \"五级 1-2-1-1-1\",\r\n                    \"value\": \"1-2-1-1-1\",\r\n                    \"checked\": false\r\n                  },\r\n                  {\r\n                    \"label\": \"五级 1-2-1-1-2\",\r\n                    \"value\": \"1-2-1-1-2\",\r\n                    \"checked\": false\r\n                  }\r\n                ]\r\n              },\r\n              {\r\n                \"label\": \"四级 1-2-1-2\",\r\n                \"value\": \"1-2-1-2\",\r\n                \"checked\": false\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"label\": \"三级 1-2-2\",\r\n            \"value\": \"1-2-2\",\r\n            \"checked\": false\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n## 更新日志\r\n\r\n### V16.0.7\r\n\r\n* 树下拉框在多选模式下选择关联子节点的勾选渲染问题\r\n\r\n### V16.0.6\r\n\r\n* 修复单选模式选中之后取消,输入框还有值\r\n* 可以自定义label查询\r\n\r\n### V16.0.4\r\n\r\n* 新增`搜索`、`节点强关联`、`单选/多选`功能，修改复选框事件为check\r\n\r\n\r\n### v14.0.1/v15.0.1\r\n\r\n* 新增 `nodeKey` 属性，用于配置树节点唯一标识的属性名，比如`id`，那么数据项中必须包含一项属性名为 `id`\r\n* 新增 `nodeProps` 属性，用于配置树的node节点选项，包含`children`、`label`、`disabled`、`isLeaf`，组件的数据格式可以使用自定义的格式\r\n\r\n\r\n\r\n\r\n\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-form-upload\\readme.md":{"name":"v2-form-upload","title":"Upload 上传","type":"component","content":"# Upload 上传\r\n\r\n通过点击或者拖拽上传文件\r\n\r\n## WEBIDE用法\r\n\r\n### 属性列表\r\n\r\n#### 标题文本\r\n\r\n显示在最左侧的说明标签。\r\n\r\n#### 标题宽度\r\n\r\n左侧说明标签的宽度，CSS 格式。\r\n\r\n#### 提示文本\r\n\r\n按钮下方的提示文本。\r\n\r\n#### 按钮文本\r\n\r\n按钮上的文字。\r\n\r\n#### 上传时附带的参数\r\n\r\nJS 对象，表示要 encode 到 form data 中的额外参数。\r\n\r\n#### 上传的文件字段名\r\n\r\n文件在 form data 中的 key 名。\r\n\r\n#### 单个文件最大的M数\r\n\r\n单个文件大小上限（单位 MB）\r\n\r\n#### 最大允许上传个数\r\n\r\n最多一次上传的文件个数。\r\n\r\n#### 文件格式限制\r\n\r\n允许的 MIME 列表，例如 `image/jpeg,image/png`.\r\n\r\n#### 上传的地址\r\n\r\n要请求的后端 HTTP Endpoint.\r\n\r\n#### 类型\r\n\r\n- `normal` 点击上传\r\n- `avatar` 头像上传\r\n- `picture` 图片墙\r\n- `thumbnail` 缩略图\r\n- `picList` 图片列表\r\n- `drag` 拖拽上传\r\n- `hand` 手动上传\r\n\r\n#### 列表类型\r\n\r\n- `text` 文本\r\n- `picture` 图片\r\n- `picture-card` 卡片\r\n- `none` 不显示列表\r\n\r\n#### 删除文件回调方法\r\n\r\n填写已声明的方法名，不用点绑定，直接写字符串。\r\n\r\n#### 选择的文件\r\n\r\n目前被选中的文件的列表，格式如下，可绑定数据。\r\n\r\n```\r\n[{name: 'food.jpeg', url: 'foo'}, {name: 'food2.jpeg', url: 'bar'}]\r\n```\r\n\r\n#### 标题排列方式\r\n\r\n- `row` 同列排列\r\n- `col` 同行排列\r\n\r\n## Element用法\r\n\r\n### Attribute\r\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\r\n|---------- |-------------- |---------- |--------------------------------  |-------- |\r\n| action | 必选参数，上传的地址 | string | — | — |\r\n| headers | 设置上传的请求头部 | object | — | — |\r\n| multiple | 是否支持多选文件 | boolean | — | — |\r\n| data | 上传时附带的额外参数 | object | — | — |\r\n| name | 上传的文件字段名 | string | — | file |\r\n| with-credentials | 支持发送 cookie 凭证信息 | boolean | — | false |\r\n| show-file-list | 是否显示已上传文件列表 | boolean | — | true |\r\n| drag | 是否启用拖拽上传 | boolean | — | false |\r\n| accept | 接受上传的[文件类型](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept)（thumbnail-mode 模式下此参数无效）| string | — | — |\r\n| on-preview | 点击文件列表中已上传的文件时的钩子 | function(file) | — | — |\r\n| on-remove | 文件列表移除文件时的钩子 | function(file, fileList) | — | — |\r\n| on-success | 文件上传成功时的钩子 | function(response, file, fileList) | — | — |\r\n| on-error | 文件上传失败时的钩子 | function(err, file, fileList) | — | — |\r\n| on-progress | 文件上传时的钩子 | function(event, file, fileList) | — | — |\r\n| on-change | 文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用 | function(file, fileList) | — | — |\r\n| before-upload | 上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。 | function(file) | — | — |\r\n| before-remove | 删除文件之前的钩子，参数为上传的文件和文件列表，若返回 false 或者返回 Promise 且被 reject，则停止删除。| function(file, fileList) | — | — |\r\n| list-type | 文件列表的类型 | string | text/picture/picture-card | text |\r\n| auto-upload | 是否在选取文件后立即进行上传 | boolean | — | true |\r\n| file-list | 上传的文件列表, 例如: [{name: 'food.jpg', url: 'https://xxx.cdn.com/xxx.jpg'}] | array | — | [] |\r\n| http-request | 覆盖默认的上传行为，可以自定义上传的实现 | function | — | — |\r\n| disabled | 是否禁用 | boolean | — | false |\r\n| limit | 最大允许上传个数 |  number | — | — |\r\n| on-exceed | 文件超出个数限制时的钩子 | function(files, fileList) | — | - |\r\n\r\n### Slot\r\n| name | 说明 |\r\n|------|--------|\r\n| trigger | 触发文件选择框的内容 |\r\n| tip | 提示说明文字 |\r\n\r\n### Methods\r\n| 方法名      | 说明          | 参数 |\r\n|----------- |-------------- | -- |\r\n| clearFiles | 清空已上传的文件列表（该方法不支持在 before-upload 中调用） | — |\r\n| abort      | 取消上传请求    | （ file: fileList 中的 file 对象 ） |\r\n| submit     | 手动上传文件列表 |  —                                |\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-switchable\\readme.md":{"name":"v2-switchable","title":"切换器","type":"component","content":"## 切换器\r\n可以切换页面或切换块，只需要绑定页码变量，然后通过变化页面来切换页面\r\n\r\n### 使用方法\r\n\r\n#### 1 首先通过组件列表在页面上创建一个切换容器组件\r\n![微信图片_20200220141304](./docimg/switchable_00.png)\r\n\r\n#### 2 双击进入编辑模式,添加模板\r\n![微信图片_20200220141405](./docimg/switchable_01.png)\r\n#### 3 在模板上编辑好需要展示的页面\r\n![微信图片_20200220162728](./docimg/switchable_02.png)\r\n![微信图片_20200220162819](./docimg/switchable_03.png)\r\n#### 4 点击灰色区域退出编辑模式,切换容器会自动保存容器内的布局\r\n![微信图片_20200220162850](./docimg/switchable_04.png)\r\n#### 5 在数据篮子中新建一个数据,填写初始值0,然后将可切换容器组件的页码变量绑定这个数据篮子新建的数据\r\n\r\n切换容器的页码从零开始\r\n![微信图片_20200220163222](./docimg/switchable_05.png)\r\n\r\n#### 6 然后只需要改变这个页码变量就能展示在切换容器中保存的页面"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-components\\v2-tab\\readme.md":{"name":"v2-tab","title":"可切换标签组件的使用","type":"component","content":"## 可切换标签组件的使用\r\n\r\n### 组件属性配置\r\n\r\n单击组件，可在属性配置面板配置属性：\r\n\r\n- 标签风格：配置组件整体外观风格。\r\n\r\n    ![](./docimg/options1.jpg)\r\n\r\n- 有功能按钮组：在组件右上角添加一组按钮，选择`是`之后，可通过`节点配置/数据绑定`两种配置方式配置按钮组，并在事件面板对应的ref下绑定事件\r\n\r\n    - 节点配置：点击`配置项`展开所有按钮单例，点击`配置项`后面的`+`按钮可以添加一个按钮，点开按钮配置可对按钮的文本以及图标进行配置\r\n\r\n        ![](./docimg/cusEdit.jpg)\r\n\r\n    - 数据绑定：需要先在`数据篮子`中新建一个变量，变量类型为数组，数组元素中icon代表单个按钮的图标，text代表按钮的文本，然后在`图标数组`中绑定此变量\r\n\r\n        ![](./docimg/defEdit1.jpg)\r\n        ![](./docimg/defEdit2.png)\r\n\r\n### 事件绑定\r\n\r\n在事件配置页，可以对组件暴露出来的事件进行绑定。\r\n\r\n组件默认的可绑定的事件有：组件tabs(`_op_sTabs_tabs`)，功能按钮组中的按钮(`_op_sTabs_btn_`+`按钮下标`)。移动鼠标到事件上，可以查看对应的ref属性值，并点击后面的`+`按钮添加绑定事件事件\r\n\r\n![](./docimg/event1.jpg)\r\n\r\n\r\n### 编辑单个标签页\r\n\r\n在WebIDE中双击组件，进入到编辑单个标签页的编辑画面\r\n\r\n![](./docimg/edit1.jpg)\r\n![](./docimg/edit2.jpg)\r\n\r\n点击标签标题中的`+`按钮，可以新增一个标签页。也可以点击标签标题后面的`-`按钮删除该标签页\r\n\r\n![](./docimg/edit3.jpg)\r\n\r\n通过双击标签标题，可以在弹框中配置该标签标题的文本内容、图标以及图标的位置，点击弹框外的区域即可确认信息\r\n\r\n![](./docimg/edit4.jpg)\r\n\r\n单击标签标题，可以切换到该标题的内容编辑区中，可以在标题下方的容器中拖拽组件进行编辑内容\r\n\r\n![](./docimg/edit5.jpg)\r\n\r\n点击WebIDE编辑区的灰色部分即可退出组件的编辑模式，并展示编辑后的效果。\r\n\r\n![](./docimg/edit6.jpg)\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.preview.fusion\\README.md":{"name":"webide.preview.fusion","title":"fusion编辑预览窗口","type":"component","content":"# fusion编辑预览窗口\r\n\r\n## 发版日志\r\n\r\n- V16.0.1 202001016 发布10月稳定版本。"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\component\\native-cpt\\readme.md":{"name":"native-cpt","title":"原生标签","type":"component","content":"## 原生标签\r\n\r\n可生成原生dom元素 如：`['div', 'span', 'a', 'p', 'area', 'hr', 'b', 'h1', 'h2', 'h3', 'canvas', 'svg', 'table', 'tbody', 'select']`"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\component\\v2-article\\readme.md":{"name":"v2-article","title":"文章编写器","type":"component","content":"## 文章编写器"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\component\\v2-compilerable-table\\readme.md":{"name":"v2-compilerable-table","title":"新表格使用步骤","type":"component","content":"## 新表格使用步骤\r\n\r\n### 数据格式的对映\r\n\r\n拖出新表格组件后，可在「表头设计」这个选项卡中设置数据条目和表格列之间的映射关系。\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/mapping.png)\r\n\r\n### 使用情形（一）：前端数据源，展示全部数据\r\n\r\n首先在数据篮子里添加一个数据项，作为表格的数据：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontend1.png)\r\n\r\n然后拖出一个新表格组件，把「数据源 >> 当前页数据变量」设为刚才添加的数据项：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontend2.png)\r\n\r\n因为需要展示全部条目（不做分页、搜索之类的操作），其它的选项都不用管。\r\n\r\n### 使用情形（二）：前端数据源，支持分页、排序、搜索\r\n\r\n首先在数据篮子里添加一个数据项，作为表格的**全部**数据：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontendadv1.png)\r\n\r\n\r\n然后拖出一个新表格组件，把「数据源 >> 前端数据源 >> 全量数据变量」设为刚才添加的数据项：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontendadv2.png)\r\n\r\n然后点击「自动配置」，生成分页、排序、搜索所需的数据篮子和方法：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontendadv3.png)\r\n\r\n自动生成的数据篮子和方法：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontendadv4.png)\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontendadv5.png)\r\n\r\n然后要把「分页器 >> 打开分页器」设为开启（必须）：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontendadv6.png)\r\n\r\n效果：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/frontendadv7.png)\r\n\r\n#### 排序\r\n\r\n设置：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/sort1.png)\r\n\r\n效果：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/sort2.png)\r\n\r\n\r\n#### 搜索\r\n\r\n设置：\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/search1.png)\r\n\r\n效果：\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/search2.png)\r\n\r\n### 使用情形（三）：后端数据源\r\n\r\n与上一种情形的配置方法基本相同，只是在做自动数据源配置时，要选择「后端数据源」并填入请求 URL：\r\n\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/backend1.png)\r\n\r\n自动配置成功之后，refreshTable 方法中会包含请求的具体代码：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/backend2.png)\r\n\r\n### 自定义单元格\r\n\r\n单元格可设置为展示自定义组件，配置如下。自定义组件的每个 prop 可对应数据条目的一个字段。 \r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/custom1.png)\r\n\r\n效果:\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/custom2.png)\r\n\r\n### 操作列（简易功能）\r\n\r\n操作列目前是基于自定义单元格的，要使用操作列，需要创建一个专门的自定义组件。\r\n\r\n在这个自定义组件中，操作按钮按下时需要 emit 一个 click 事件，事件的 payload 是操作的名字。\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/opcol1.png)\r\n\r\n然后把这个组件设为操作列的自定义单元格，给「@click 绑定」填入一个方法来处理操作。\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/opcol2.png)\r\n\r\n这个方法会被传入三个参数，分别是 操作名、行索引、行数据：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/opcol3.png)\r\n\r\n效果：\r\n\r\n![图片](/v1/support/doc/component/v2-compilerable-table/img/opcol4.png)"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\component\\v2-page\\readme.md":{"name":"v2-page","title":"页面加载器","type":"component","content":"# 页面加载器\r\n\r\n 页面加载器是一个页面异步加载器。只需通过配置页面路径即可实现动态按需加载相应页面。\r\n 同时可以用个配置页面切出切入动画，是否缓存等，实现页面优雅过渡切换。\r\n\r\n\r\n#### 页面路径\r\n\r\n填写页面路径 ，以views文件夹为相对路径如`spa/spa`\r\n\r\n#### 页面参数\r\n\r\n绑定一个已在数据篮子定义的变量，变量的数据格式是对象\r\n\r\n#### 是否保持缓存\r\n\r\n是否保持缓存,再次调用时不重新加载\r\n\r\n#### 切入动画\r\n\r\n填写animate.css的动画类名，也可以自定义。如`zoomIn`  \r\n\r\n#### 切出动画\r\n\r\n填写animate.css的动画类名，也可以自定义。如`zoomOut`\r\n\r\n#### 附: 动画列表及预览 [https://daneden.github.io/animate.css/](https://daneden.github.io/animate.css/)\r\n\r\n\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\component\\v2Container\\readme.md":{"name":"v2Container","title":"容器组件","type":"component","content":"## 容器组件\r\n\r\n容器组件是一个通用型的流内容容器。\r\n\r\n组件默认使用flex布局\r\n\r\n常用于页面布局"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\ide\\databasket\\readme.md":{"name":"databasket","title":"数据篮子","type":"ide","content":"# 数据篮子\r\n数据篮子实际上是vue页面的data(数据)和computed(计算属性)。改变时会实现渲染视图\r\n\r\n## 简单模式\r\n会编译成页面的data。\r\n - 代码，数字、字符串、对象或数组，页面数据，修改时可以及时渲染视图。例子：`\"name\"`\r\n\r\n#### 例子      \r\n代码:\r\n```\r\n\"张三\"\r\n```\r\n                \r\n\r\n## 高级模式\r\n会编译成页面的computed。\r\n - 代码，函数，通过执行函数返回数据供页面使用，最后必须return值。例子：`return \"\"`\r\n\r\n \r\n#### 例子：       \r\n代码:必须手动return一个值\r\n```\r\nlet ctx = this;\r\nreturn ctx.a + ctx.b;\r\n```\r\n\r\n## set\r\n[参考vue官网](https://cn.vuejs.org/v2/api/?#computed)\r\n选择读取和设置后，可以设置computed的set和get，分别用来获取计算属性和设置计算属性。          \r\n例子：\r\n```\r\naPlus: {\r\n      get: function () {\r\n        //当取这个属性值的时候get方法会被执行\r\n        return this.a + 1\r\n      },\r\n      set: function (v) {\r\n        //当设置这个属性值的时候set方法会被执行\r\n        this.a = v - 1\r\n      }\r\n}\r\n```\r\n"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\ide\\form\\readme.md":{"name":"form","title":"表单校验","type":"ide","content":"# 表单校验\r\n\r\n## 表单校验使用例\r\n\r\n### 表单校验基本配置与非字典校验规则的使用\r\n\r\n要处理表单校验/提交，首先从右侧面板打开表单编辑器。\r\n\r\n![form1](img/form1.png)\r\n\r\n然后新建一个表单，设置好英文名、中文名、校验时机。\r\n\r\n![form2](img/form2.png)\r\n\r\n![form3](img/form3.png)\r\n\r\n设置好了之后点保存，回到界面编辑器，创建表单所需要的输入组件（文本框等）以及提交组件（按钮等）。\r\n\r\n![form4](img/form4.png)\r\n\r\n界面做好了之后，不要急着设置校验规则，先打开数据篮子，添加每个输入组件所对应的数据，然后将数据绑定到组件上。如果不绑定数据，输入框是输不进文字的。\r\n\r\n![form5](img/form5.png)\r\n\r\n![form6](img/form6.png)\r\n\r\n确认每个输入组件都绑定了数据，点选每个输入组件**和提交组件**，在弹出的菜单中选择「添加到表单...」，\r\n\r\n![form7](img/form7.png)\r\n\r\n此时会弹出一个表单列表，勾选刚刚创建的新表单。\r\n\r\n![form8](img/form8.png)\r\n\r\n然后再打开表单编辑器，可以看到各个组件已经加入到表单之中。每个输入组件可选三种校验模式，分别是 字典、JS 代码 和 正则表达式，三者只选其一。本例中只演示后两种。\r\n\r\n当选择「正则表达式时」，有两个配置项，一个是输入不正确时显示的错误提示，一个是用来匹配输入的正则表达式。需要注意的是，正则表达式中不要出现 `^` 和 `$`, 它们在执行校验时会被自动添加。比如设定的正则是 `1[0-9]{10}`, 那么实际匹配用的正则就是 `^1[0-9]{10}$`.\r\n\r\n![form9](img/form9.png)\r\n\r\n当选择「JS 代码」时，需要填写的代码是一个函数表达式，函数接受三个参数，分别是 当前输入值 `value`, 组件 Vue 实例 `vueIns`, 页面 Vue 实例 `ctx`, 返回布尔值，表明输入是否正确。 \r\n\r\n![form10](img/form10.png)\r\n\r\n设置完每个组件的校验规则之后，保存表单设置，然后**保存页面**，运行项目，即可看到效果。\r\n\r\n![form11](img/form11.png)\r\n\r\n![form12](img/form12.png)\r\n\r\n### 表单提交配置\r\n\r\n要启用表单提交，首先要设定数据格式，即每个输入组件对应字段的名字。\r\n\r\n打开表单编辑器，改每个输入组件的「提交字段名」。\r\n\r\n![form13](img/form13.png)\r\n\r\n![form14](img/form14.png)\r\n\r\n修改完成后切换到对表单本身的设定，选择「提交」选项卡。\r\n\r\n![form15](img/form15.png)\r\n\r\n添加两个提交触发规则，分别对应最后一个文本框和提交按钮。默认的 `(default)` 事件对按钮来说是 `click` 事件，对文本框来说是 `keyup.enter` 事件。\r\n\r\n![form16](img/form16.png)\r\n\r\n设置一个简单的提交回调，用以显示生成的提交数据。保存表单设定，保存页面，运行即有效果。\r\n\r\n![form17](img/form17.png)\r\n\r\n![form18](img/form18.png)\r\n\r\n如需提交到 RESTful API, 可参考以下回调模板：\r\n\r\n```js\r\n(function(data, ctx){\r\n    /**\r\n     *  data: { [key: string]: string }  // 要提交的数据\r\n     *  ctx: VueComponent  // 页面的组件实例\r\n     */\r\n    let url = 'https://jsonplaceholder.typicode.com/posts'\r\n    ctx.$axios.post(url, data).then(res => {\r\n        ctx.$message({\r\n            type: 'success',\r\n            message: '提交成功: ' + JSON.stringify(data),\r\n            center: true\r\n        })\r\n    })\r\n})\r\n```\r\n\r\n### 使用字典进行表单校验\r\n\r\n一个字典是多个字段的集合，一个字段是多个预设校验规则的集合。使用字典进行校验，可使输入组件关联某个字典中的某个字段，选取其中的**全部或部分**规则并**自定义顺序**，作为该输入组件的校验规则。当字典中的某个规则被修改时，所有引用该规则的输入组件的校验规则都会**跟随字典的修改**（除了指定了规则覆写的组件）。\r\n\r\n切换到 IDE 首页，可点击上方工具栏中的相应按钮，即可进入字典编辑器。需要注意的是，在填写错误提示时，可以使用 `{字段名}` 这个占位符来给字段名留空，以适应具体表单中的字段名与字典中不同的情形。\r\n\r\n![form19](img/form19.png)\r\n\r\n编辑完字典，保存以后，就可在表单编辑器中使用字典了：\r\n\r\n![form20](img/form20.png)\r\n\r\n顺序在前面的规则先被校验，如果失败，就不会再校验其它规则。\r\n\r\n### 校验回调解说\r\n\r\n```js\r\n(function(result, ctx, resolve, reject){\r\n    /**\r\n     *  result: {\r\n     *      ok: boolean,\r\n     *      child_results: Array<{\r\n     *          ok: boolean,  // 输入是否正确\r\n     *          message?: string,  // 错误提示\r\n     *          fieldName: string,  // 字段名\r\n     *          fieldDesc: string,  // 字段描述\r\n     *          wid: string,  // 输入组件 ID\r\n     *          vueIns: VueComponent  // 输入组件实例\r\n     *      }>\r\n     *  }  // 校验结果列表\r\n     *  ctx: VueComponent  // 页面的组件实例\r\n     *  resolve: () => void  // 校验完成，可以提交\r\n     *  reject: () => void  // 校验完成，不能提交\r\n     */\r\n```\r\n\r\n上面这一部分是回调参数的数据格式定义。当校验触发时，表单里每个输入组件会按照设定好的规则被校验，所有组件的校验结果会被打包，作为 `result` 参数传给校验回调。`result` 有两个字段，一个是 `ok`, 表示是否所有输入组件的较验都通过了；另一个是 `child_result`, 是一个由每个输入组件的校验结果组成的数组。\r\n\r\n校验回调的责任主要是显示校验结果，但也可以进行额外的自定义校验，如用户名查重等。由于用户名查重这样的操作需要进行 API 请求，而 API 请求是异步的，所以整个校验回调也被设计成异步的，即，校验回调有两个函数参数 `resolve` 和 `reject`, 调用 `resolve()` 表示校验通过，调用 `reject()` 表示校验不通过。如校验不通过，是不能提交的。\r\n\r\n`ctx` 是指页面的 vue 实例。\r\n\r\n下面这一部分是显示错误提示的代码。\r\n\r\n```js\r\n    console.log('字段:')\r\n    result.child_results.forEach(r => {\r\n        if (r.ok) {\r\n            console.log(r.fieldName, '输入正确')\r\n        } else {\r\n            console.log(r.fieldName, '输入不正确', r.message)\r\n        }\r\n        if (r.vueIns.$showResult) {\r\n            // 在 r 所对应的组件上显示错误提示，\r\n            // 若无错误则清除提示。入参 { ok: boolean, message?: string }\r\n            r.vueIns.$showResult(r)\r\n        }\r\n    })\r\n    if (result.ok) {\r\n        console.log('=> 表单输入正确，验证通过')\r\n        resolve()\r\n    } else {\r\n        console.log('=> 表单输入不正确')\r\n        reject()\r\n    }\r\n})\r\n```\r\n\r\n对于每个输入组件，如果 `$showResult` 方法存在，就调用它，以显示错误提示。注意，校验成功时也应调用这个方法，以保证旧的错误提示能够被清除。\r\n\r\n最后调用 `resolve()` 或  `reject()` 来异步地返回校验结果。\r\n\r\n### 后台校验代码模板\r\n\r\n以注册用户查重为例，后台校验逻辑比较复杂，可参考以下代码模板，注释里包含对代码的解释。\r\n\r\n```js\r\n(function() {\r\n    // 创建一个 IIFE, 记录上次校验结束的时间\r\n    let d = new Date()\r\n    let finish = () => { d = new Date() }\r\n    return (function(result, ctx, resolve, reject){\r\n        // 封装 resolve 和 reject, 使得校验完成后「上次校验结束的时间」能自动更新\r\n        let _resolve = resolve\r\n        resolve = () => { _resolve(); finish() }\r\n        let _reject = reject\r\n        reject = () => { _reject(); finish() }\r\n        // 校验输入格式是否正确\r\n        console.log('字段:')\r\n        let userNameInput = null\r\n        result.child_results.forEach(r => {\r\n            if (r.ok) {\r\n                console.log(r.fieldName, '输入正确')\r\n            } else {\r\n                console.log(r.fieldName, '输入不正确', r.message)\r\n            }\r\n            if (r.vueIns.$showResult) {\r\n                r.vueIns.$showResult(r)\r\n            }\r\n            if (r.fieldName == 'username') {\r\n                userNameInput = r.vueIns  // 拿到用户名输入框的 vue 实例\r\n            }\r\n        })\r\n        if (!result.ok) {\r\n            // 情况 1: 输入格式不正确，直接按不通过处理\r\n            console.log('=> 表单输入不正确')\r\n            reject()\r\n        } else if(userNameInput) {\r\n            // 情况 2: 输入格式正确，进行异步校验\r\n            console.log('=> 查重')\r\n            ;(async () => {\r\n                try {\r\n                    let current = new Date()\r\n                    // 发送 HTTP 请求\r\n                    let users = await ctx.$axios.get('https://jsonplaceholder.typicode.com/users')\r\n                    if (current < d) {\r\n                        // 如果已经有了新的校验结果，应丢弃旧的（先发的请求后到）\r\n                        return\r\n                    }\r\n                    let ok = users.every(user => user.username != userNameInput.model.value)\r\n                    if (ok) {\r\n                        console.log('=> 查重完成，没有重复，可以注册')\r\n                        resolve()\r\n                        userNameInput.$showResult({ ok: true })\r\n                    } else {\r\n                        console.log('=> 查重完成，有重复')\r\n                        reject()\r\n                        userNameInput.$showResult({ ok: false, message: '用户名已存在'})\r\n                    }\r\n                } catch(error) {\r\n                    console.log(error)\r\n                    userNameInput.$showResult({ ok: false, message: '查重失败'})\r\n                    reject()\r\n                }\r\n            })()\r\n        } else {\r\n            // 备用代码，处理找不到用户名输入框的情况，正常情况下不会执行\r\n            console.log('=> 表单输入正确')\r\n            resolve()\r\n        }\r\n    })\r\n})()\r\n```"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\ide\\method\\readme.md":{"name":"method","title":"方法页面","type":"ide","content":"# 方法页面\r\n方法页面管理着页面的逻辑，内容有页面的方法，事件，轮询，生命周期。\r\n\r\n## 生命周期\r\n生命周期就是Vue实例化的各个钩子函数。参考[VUE官网](https://cn.vuejs.org/v2/api/#beforeCreate)\r\n![生命周期示意图](https://cn.vuejs.org/images/lifecycle.png)\r\n\r\n其中代码编辑区的内容会直接编译到vue页面对应的生命周期中。\r\n#### 代码模板\r\n我们推荐在生命周期中用`ctx`访问页面实例。其中`ctx`需要自己定义。\r\n```\r\nconst ctx = this;\r\n```\r\n\r\n## 轮询\r\n轮询会在页面进入时触发一个计时器，每到规定的时间触发一次函数。\r\n\r\n\r\n\r\n###### 描述\r\n描述该轮询，会显示在左侧轮询列表。不会影响编译代码。\r\n\r\n###### 间隔时间\r\n间隔时间是该轮询每间隔多久执行一次，单位是百毫秒。例如(10)即是间隔1秒。\r\n\r\n\r\n###### 代码\r\n轮询中用`ctx`访问页面实例。不需要再定义。\r\n\r\n\r\n## 方法\r\n###### 英文名称\r\n方法名，编辑的页面，会生成这个名称的方法。\r\n\r\n###### 中文描述\r\n用于开发者描述该方法，对编译没有影响。\r\n\r\n###### 参数\r\n方法的参数，会编译在方法中，其中参数名即是参数的名称。中文描述，用于开发者描述该方法，对编译没有影响。\r\n\r\n#### 代码模板\r\n我们推荐在方法中用`ctx`访问页面实例。其中`ctx`需要自己定义。\r\n```\r\nconst ctx = this;\r\n```\r\n\r\n## 事件\r\n###### 方法名\r\n方法名下拉选项中会显示页面中已定义的方法名。选择之后会在当前事件的代码中添加方法模板。\r\n\r\n###### 参数\r\n事件方法的参数，会编译在事件中，其中参数名即是参数的名称。中文描述，用于开发者描述该方法，对编译没有影响。\r\n\r\n#### 代码模板\r\n我们推荐在事件中用`ctx`访问页面实例。其中`ctx`需要自己定义。\r\n```\r\nconst ctx = this;\r\n```"},"C:\\Users\\Chick\\Desktop\\Graduation_project-fontpage\\node_modules\\@v2-lib\\webide.support.fusion\\doc\\ide\\watch\\readme.md":{"name":"watch","title":"监听","type":"ide","content":"# 监听\r\n一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。[VUE官网](https://cn.vuejs.org/v2/api/#watch)        \r\n              \r\n\r\n## 简单模式\r\n - 监听对象，函数，可以用打点形式监听对象里的具体的值。例子：`a.b`\r\n - 代码，函数，监听对象改变时执行的方法。例子：`funtion(){}`\r\n\r\n#### 例子      \r\n监听对象:\r\n```\r\nuser.name\r\n```\r\n代码:\r\n```\r\nfunction (val, oldVal) {\r\n\tconsole.log( val, oldVal)\r\n}\r\n```\r\n                \r\n\r\n## 高级模式\r\n - 监听对象，字符串，函数return一个值，值改变时，触发监听代码。例子：` function () {return this.a + this.b}`\r\n - 代码，函数，监听对象改变时执行的方法。例子：`funtion(){}`\r\n\r\n \r\n#### 例子：       \r\n监听对象:\r\n```\r\nfunction () {\r\n    let a = this.a;\r\n    let b = this.b;\r\n    return a + b;\r\n  }\r\n```\r\n代码:\r\n```\r\nfunction (val, oldVal) {\r\n    this.c = val;\r\n  }\r\n```"}}